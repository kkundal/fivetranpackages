{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2023-02-14T19:56:09.311976Z", "invocation_id": "8b192e24-a15f-4316-abe2-57f9bfa3f7f6", "env": {}, "project_id": "0161153b585f60374e0a66941a656f43", "user_id": "2bfa9082-ea6e-467b-abdc-d0514ab111d9", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_currency_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_currency_data.csv", "original_file_path": "seeds/netsuite2_currency_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_currency_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_currency_data"], "alias": "netsuite2_currency_data", "checksum": {"name": "sha256", "checksum": "860ccbec95ff9c17e8e40db2c32e28ab56f2ef18f6af775bc982fc5494aae23c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.346455, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_currency_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_vendors_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_vendors_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_vendors_data.csv", "original_file_path": "seeds/netsuite_vendors_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_vendors_data", "fqn": ["netsuite_source_integration_tests", "netsuite_vendors_data"], "alias": "netsuite_vendors_data", "checksum": {"name": "sha256", "checksum": "f050ea1d5fa346fcefbe9a5792dfbe9f5aabbec17a359ab2e497be7b3e888e2d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.352625, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendors_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_classification_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_classification_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_classification_data.csv", "original_file_path": "seeds/netsuite2_classification_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_classification_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_classification_data"], "alias": "netsuite2_classification_data", "checksum": {"name": "sha256", "checksum": "800dc93b65435dd17dbe1f668890a317bce221193a1ca52d6075c5ab8504e29c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.353955, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_classification_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_accounting_books_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_accounting_books_data.csv", "original_file_path": "seeds/netsuite_accounting_books_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounting_books_data", "fqn": ["netsuite_source_integration_tests", "netsuite_accounting_books_data"], "alias": "netsuite_accounting_books_data", "checksum": {"name": "sha256", "checksum": "45b73583ed0a1425f131de59b6a17b997caec17d9b0884947f27008ae81c1684"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.35518, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_books_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_entities_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_entities_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_entities_data.csv", "original_file_path": "seeds/netsuite2_entities_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_entities_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_entities_data"], "alias": "netsuite2_entities_data", "checksum": {"name": "sha256", "checksum": "e28458219e88aecec3f237ff9c58941d13c0e40c478fec9e8727fbb3d9d244c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.356385, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entities_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_vendor_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_vendor_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_vendor_data.csv", "original_file_path": "seeds/netsuite2_vendor_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_vendor_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_vendor_data"], "alias": "netsuite2_vendor_data", "checksum": {"name": "sha256", "checksum": "f1f8f8762dd6b7192e2273f12ee86f43eb06933a2055da91d37c82f0ddbec0b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3577201, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_consolidated_exchange_rates_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_consolidated_exchange_rates_data.csv", "original_file_path": "seeds/netsuite_consolidated_exchange_rates_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data", "fqn": ["netsuite_source_integration_tests", "netsuite_consolidated_exchange_rates_data"], "alias": "netsuite_consolidated_exchange_rates_data", "checksum": {"name": "sha256", "checksum": "b8719124e41745363f91f996b99812a9e6c98306ef24034c5efb12b64600a496"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.358915, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_consolidated_exchange_rates_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_customers_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_customers_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_customers_data.csv", "original_file_path": "seeds/netsuite_customers_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_customers_data", "fqn": ["netsuite_source_integration_tests", "netsuite_customers_data"], "alias": "netsuite_customers_data", "checksum": {"name": "sha256", "checksum": "e3ce06d6edaeb9f777c340a597d8de7cfb2d3423a20a2421eae4c86264a9c93a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3601038, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_customers_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_locations_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_locations_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_locations_data.csv", "original_file_path": "seeds/netsuite_locations_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_locations_data", "fqn": ["netsuite_source_integration_tests", "netsuite_locations_data"], "alias": "netsuite_locations_data", "checksum": {"name": "sha256", "checksum": "8a71a79adb44cc02707a75ee10a85f03b472324a894ddc32716eeea7d533bc2f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.361294, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_locations_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_transaction_line_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_transaction_line_data.csv", "original_file_path": "seeds/netsuite2_transaction_line_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_transaction_line_data"], "alias": "netsuite2_transaction_line_data", "checksum": {"name": "sha256", "checksum": "746773ecc92c2e3e1113ebf7d00fd1a33723016cd3f221fca37fa938315ca5b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.362617, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_line_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_account_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_account_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_account_data.csv", "original_file_path": "seeds/netsuite2_account_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_account_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_account_data"], "alias": "netsuite2_account_data", "checksum": {"name": "sha256", "checksum": "689909e17df06e2b189107699467b29cda77e8b4ab1d433c644872c481524747"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.363811, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_items_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_items_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_items_data.csv", "original_file_path": "seeds/netsuite_items_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_items_data", "fqn": ["netsuite_source_integration_tests", "netsuite_items_data"], "alias": "netsuite_items_data", "checksum": {"name": "sha256", "checksum": "567fc2b4c8e46962f9297095017fa529544feafed31503e9fc3ed51bf60b866d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3650749, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_items_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_subsidiary_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_subsidiary_data.csv", "original_file_path": "seeds/netsuite2_subsidiary_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_subsidiary_data"], "alias": "netsuite2_subsidiary_data", "checksum": {"name": "sha256", "checksum": "ab5bdff19af5d7a5f923820106bd9aa7fc321d3a1b1397ab2ad33f8d1fce3991"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.366305, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_subsidiary_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_account_type_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_account_type_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_account_type_data.csv", "original_file_path": "seeds/netsuite2_account_type_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_account_type_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_account_type_data"], "alias": "netsuite2_account_type_data", "checksum": {"name": "sha256", "checksum": "a25b940f65942b256bca8c5ac0c5d4f420a9b1e2d6330bd1102da3e8fa664c7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.367628, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_type_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_accounting_period_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_accounting_period_data.csv", "original_file_path": "seeds/netsuite2_accounting_period_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_period_data"], "alias": "netsuite2_accounting_period_data", "checksum": {"name": "sha256", "checksum": "8434862ad961a3c3e31effc380b84b721212641ca8623789446401e345cf9dba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.368812, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_accounting_period_fiscal_cal_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_accounting_period_fiscal_cal_data.csv", "original_file_path": "seeds/netsuite2_accounting_period_fiscal_cal_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_period_fiscal_cal_data"], "alias": "netsuite2_accounting_period_fiscal_cal_data", "checksum": {"name": "sha256", "checksum": "ff3ab48ac65713c861da7a5542f14db75c64c4ad7ae4efc8acb2241c10b127c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3699992, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_fiscal_cal_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_classes_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_classes_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_classes_data.csv", "original_file_path": "seeds/netsuite_classes_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_classes_data", "fqn": ["netsuite_source_integration_tests", "netsuite_classes_data"], "alias": "netsuite_classes_data", "checksum": {"name": "sha256", "checksum": "18e8a63665925edfacbeaa443c7f6632c4489bd521df77d945ee657d398588e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.371186, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_classes_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_entity_address_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_entity_address_data.csv", "original_file_path": "seeds/netsuite2_entity_address_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_entity_address_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_entity_address_data"], "alias": "netsuite2_entity_address_data", "checksum": {"name": "sha256", "checksum": "194e01a215739408a796ec2d819da0bc650c860e052e2cddf6695c3faab3b059"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.372502, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entity_address_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_departments_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_departments_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_departments_data.csv", "original_file_path": "seeds/netsuite_departments_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_departments_data", "fqn": ["netsuite_source_integration_tests", "netsuite_departments_data"], "alias": "netsuite_departments_data", "checksum": {"name": "sha256", "checksum": "9060203f11419c602daf8afc578035d29ef612e1e868b12fa22eaf7b37942607"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3736918, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_departments_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_customer_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_customer_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_customer_data.csv", "original_file_path": "seeds/netsuite2_customer_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_customer_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_customer_data"], "alias": "netsuite2_customer_data", "checksum": {"name": "sha256", "checksum": "5500a2147bb74338ce1aa8bc059d0f3cae74cdfcf4d0d68b49121540b5ccb573"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.374874, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_customer_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_tran_acct_line_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_tran_acct_line_data.csv", "original_file_path": "seeds/netsuite2_tran_acct_line_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_tran_acct_line_data"], "alias": "netsuite2_tran_acct_line_data", "checksum": {"name": "sha256", "checksum": "c6e72ec64e0179be9c3f3fb6435a828570cd1cb9ba2092ce78b6a4900bc02ddb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.376053, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_tran_acct_line_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_department_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_department_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_department_data.csv", "original_file_path": "seeds/netsuite2_department_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_department_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_department_data"], "alias": "netsuite2_department_data", "checksum": {"name": "sha256", "checksum": "6570dc2a4efbac97f87551588b34558d6c5c5b8e071b3cfea59bc9e13a0b7b4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3773718, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_department_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_expense_accounts_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_expense_accounts_data.csv", "original_file_path": "seeds/netsuite_expense_accounts_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data", "fqn": ["netsuite_source_integration_tests", "netsuite_expense_accounts_data"], "alias": "netsuite_expense_accounts_data", "checksum": {"name": "sha256", "checksum": "983ef804359afb2c0f7db8c3bb32d5eecdec8c0d9fbf502360944877dc212f9c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.378546, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_expense_accounts_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_currencies_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_currencies_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_currencies_data.csv", "original_file_path": "seeds/netsuite_currencies_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_currencies_data", "fqn": ["netsuite_source_integration_tests", "netsuite_currencies_data"], "alias": "netsuite_currencies_data", "checksum": {"name": "sha256", "checksum": "f98ba1751b715296956912fc4c2b43f58875c56740e829c045aefe1172cb2232"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.379733, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_currencies_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_accounting_book_sub_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_accounting_book_sub_data.csv", "original_file_path": "seeds/netsuite2_accounting_book_sub_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_book_sub_data"], "alias": "netsuite2_accounting_book_sub_data", "checksum": {"name": "sha256", "checksum": "e95506b5ada820d0a9a79e7759d749a1512beaa8922c3d6e78c105f9029f7992"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.380911, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_sub_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_accounts_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_accounts_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_accounts_data.csv", "original_file_path": "seeds/netsuite_accounts_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounts_data", "fqn": ["netsuite_source_integration_tests", "netsuite_accounts_data"], "alias": "netsuite_accounts_data", "checksum": {"name": "sha256", "checksum": "a3d24c6bf7438f0bf6e0a725565ea0bb000c6fa01b7ffbdfb1b70689f5ad515b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.382231, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounts_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_vendor_category_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_vendor_category_data.csv", "original_file_path": "seeds/netsuite2_vendor_category_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_vendor_category_data"], "alias": "netsuite2_vendor_category_data", "checksum": {"name": "sha256", "checksum": "498453adb748d03d07147625b2ef67966f7200523eef6d824ce8787212159bf8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.383415, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_category_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_accounting_periods_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_accounting_periods_data.csv", "original_file_path": "seeds/netsuite_accounting_periods_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data", "fqn": ["netsuite_source_integration_tests", "netsuite_accounting_periods_data"], "alias": "netsuite_accounting_periods_data", "checksum": {"name": "sha256", "checksum": "673c2f4c76e4cb8bbccecc7e30c0056163d39f53174013f0460a2e4e5efe6e33"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.384601, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_periods_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_subsidiaries_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_subsidiaries_data.csv", "original_file_path": "seeds/netsuite_subsidiaries_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data", "fqn": ["netsuite_source_integration_tests", "netsuite_subsidiaries_data"], "alias": "netsuite_subsidiaries_data", "checksum": {"name": "sha256", "checksum": "4dd2e8b192c4c052a847d6791b5a32da6968a3234d48b85a37ae20f7ee9445de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.385772, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_subsidiaries_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_job_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_job_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_job_data.csv", "original_file_path": "seeds/netsuite2_job_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_job_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_job_data"], "alias": "netsuite2_job_data", "checksum": {"name": "sha256", "checksum": "5fa5024df2ff944188a0ada73be30727b1b1552f3a890b9bd244264d2188fd68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.387085, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_job_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_transaction_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_transaction_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_transaction_data.csv", "original_file_path": "seeds/netsuite2_transaction_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_transaction_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_transaction_data"], "alias": "netsuite2_transaction_data", "checksum": {"name": "sha256", "checksum": "16b52e72a514adb263e4e26594326996ab0c1089e576155a4f429975b1d54db0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.388265, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_location_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_location_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_location_data.csv", "original_file_path": "seeds/netsuite2_location_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_location_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_location_data"], "alias": "netsuite2_location_data", "checksum": {"name": "sha256", "checksum": "a3ce64b239774b83f9226b8e1f8504147dd5f890a86ab80fda41c0376a6e2d19"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3894389, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_income_accounts_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_income_accounts_data.csv", "original_file_path": "seeds/netsuite_income_accounts_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_income_accounts_data", "fqn": ["netsuite_source_integration_tests", "netsuite_income_accounts_data"], "alias": "netsuite_income_accounts_data", "checksum": {"name": "sha256", "checksum": "53a81321736b4a42663e253050539eb48b0d179847e23f161927d29c4cbf1367"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.390625, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_income_accounts_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_consolidated_exchange_rate_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_consolidated_exchange_rate_data.csv", "original_file_path": "seeds/netsuite2_consolidated_exchange_rate_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_consolidated_exchange_rate_data"], "alias": "netsuite2_consolidated_exchange_rate_data", "checksum": {"name": "sha256", "checksum": "d609008a0522dd0e4e60f8967234bd4ec6c6b5b4fcc8d97a7167869d27ab24ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.392158, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_consolidated_exchange_rate_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_accounting_book_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_accounting_book_data.csv", "original_file_path": "seeds/netsuite2_accounting_book_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_book_data"], "alias": "netsuite2_accounting_book_data", "checksum": {"name": "sha256", "checksum": "e5762b59dceb08e4a5170f2ff5413591cfca97f2a8a9a5080bf96860cf276566"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.393344, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_location_main_address_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_location_main_address_data.csv", "original_file_path": "seeds/netsuite2_location_main_address_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_location_main_address_data"], "alias": "netsuite2_location_main_address_data", "checksum": {"name": "sha256", "checksum": "605372cb4ea25cff3ec9f9c80374d24c71d6848ff3dbda939928851568a7311d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.39453, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_main_address_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_vendor_types_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_vendor_types_data.csv", "original_file_path": "seeds/netsuite_vendor_types_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_vendor_types_data", "fqn": ["netsuite_source_integration_tests", "netsuite_vendor_types_data"], "alias": "netsuite_vendor_types_data", "checksum": {"name": "sha256", "checksum": "2111fb5a226e9e73c187a1a1a13caa0c2d3b54bb2eedfe3287f636c049c72b64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.395712, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendor_types_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite2_item_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite2_item_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite2_item_data.csv", "original_file_path": "seeds/netsuite2_item_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite2_item_data", "fqn": ["netsuite_source_integration_tests", "netsuite2_item_data"], "alias": "netsuite2_item_data", "checksum": {"name": "sha256", "checksum": "73809b7847e14ec59fa08705c6ba1ee6be142717f9bcbe2dde9eeb5b1c14a65f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3970401, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_item_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_transactions_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_transactions_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_transactions_data.csv", "original_file_path": "seeds/netsuite_transactions_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_transactions_data", "fqn": ["netsuite_source_integration_tests", "netsuite_transactions_data"], "alias": "netsuite_transactions_data", "checksum": {"name": "sha256", "checksum": "c1d88d96de5d5e6ed310a6b008df7390a2aaf7b0d857668e0dfed259f0c704ed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.3982332, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transactions_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "netsuite_transaction_lines_data", "resource_type": "seed", "package_name": "netsuite_source_integration_tests", "path": "netsuite_transaction_lines_data.csv", "original_file_path": "seeds/netsuite_transaction_lines_data.csv", "unique_id": "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data", "fqn": ["netsuite_source_integration_tests", "netsuite_transaction_lines_data"], "alias": "netsuite_transaction_lines_data", "checksum": {"name": "sha256", "checksum": "6786bdf4b6e00d6243008c46d0bb69a21158ff27265690503aaa9d8b6faa01d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1676404469.399418, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transaction_lines_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Netsuite/dbt_netsuite_source/integration_tests"}, "model.netsuite_source.stg_netsuite2__transactions": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transactions", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__transactions.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transactions.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transactions"], "alias": "stg_netsuite2__transactions", "checksum": {"name": "sha256", "checksum": "6cfa8b003b02cfe90d29c76cb3690de25444fb558c3735c7b2dc4a89fb005251"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_number": {"name": "transaction_number", "description": "The Netsuite generated number of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The type of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Memo attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "Timestamp of the transactions due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when the transaction was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the transaction is a posting event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany_adjustment": {"name": "is_intercompany_adjustment", "description": "Boolean indicating if the transaction is an intercompany adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_reversal": {"name": "is_reversal", "description": "Boolean indicating if the transaction is a reversal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.385065, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transactions`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transactions_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transactions_tmp')),\n                staging_columns=get_netsuite2_transactions_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transactions_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__transactions_tmp"], ["stg_netsuite2__transactions_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_transactions_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions_tmp", "model.netsuite_source.stg_netsuite2__transactions_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transactions.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transactions_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as STRING) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__jobs": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__jobs", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__jobs.sql", "original_file_path": "models/netsuite2/stg_netsuite2__jobs.sql", "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__jobs"], "alias": "stg_netsuite2__jobs", "checksum": {"name": "sha256", "checksum": "0c3a18cf0045131f452b182b4f3221e98ce290d9955edb1878ac0e53c6e5fc2c"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all jobs.", "columns": {"job_id": {"name": "job_id", "description": "The unique identifier of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_external_id": {"name": "job_external_id", "description": "The unique identifier of the external job reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The unique identifier of the customer associated with the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "Reference the the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Default billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent job.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3717, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__jobs`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__using_jobs', true))) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__jobs_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__jobs_tmp')),\n                staging_columns=get_job_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__jobs_tmp"], ["stg_netsuite2__jobs_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_job_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs_tmp", "model.netsuite_source.stg_netsuite2__jobs_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__jobs.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__jobs_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__vendors": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__vendors", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__vendors.sql", "original_file_path": "models/netsuite2/stg_netsuite2__vendors.sql", "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__vendors"], "alias": "stg_netsuite2__vendors", "checksum": {"name": "sha256", "checksum": "57d89d251774cb5fc016b2e7e5b18dbcc0bdf0a0a444538ae0609a4288e1b52a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all vendor information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_date_at": {"name": "create_date_at", "description": "Timestamp of the record creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_category_id": {"name": "vendor_category_id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.386881, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendors`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__vendors_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__vendors_tmp')),\n                staging_columns=get_netsuite2_vendors_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('vendors_pass_through_columns') }}\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__vendors_tmp"], ["stg_netsuite2__vendors_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_vendors_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors_tmp", "model.netsuite_source.stg_netsuite2__vendors_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__vendors.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendors_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as INT64) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as STRING) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as INT64) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__classes": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__classes", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__classes.sql", "original_file_path": "models/netsuite2/stg_netsuite2__classes.sql", "unique_id": "model.netsuite_source.stg_netsuite2__classes", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__classes"], "alias": "stg_netsuite2__classes", "checksum": {"name": "sha256", "checksum": "55d1438c5add45a09f7a06b5edb622b71d7b1fb040fdf473c3db51261844d4a1"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all classes set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_external_id": {"name": "class_external_id", "description": "Reference to the external class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the class is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.356184, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__classes`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__classes_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__classes_tmp')),\n                staging_columns=get_netsuite2_classes_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('classes_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__classes_tmp"], ["stg_netsuite2__classes_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_classes_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__classes_tmp", "model.netsuite_source.stg_netsuite2__classes_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__classes.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__classes_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__account_types": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__account_types", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__account_types.sql", "original_file_path": "models/netsuite2/stg_netsuite2__account_types.sql", "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__account_types"], "alias": "stg_netsuite2__account_types", "checksum": {"name": "sha256", "checksum": "899ddfe641e319f7830072bbb040247692af2e25cfd465b838d27b46746b0106"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing the various account types within Netsuite.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type_id": {"name": "account_type_id", "description": "Unique identifier of thea account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Boolean indicating if the account type is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Boolean indicating if the account type is leftside.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3448162, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__account_types`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__account_types_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__account_types_tmp')),\n                staging_columns=get_accounttype_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\n        {%- if target.type == 'bigquery' -%}\n        `left` \n        {%- elif target.type == 'snowflake' -%}\n        \"LEFT\"\n        {%- elif target.type in ('redshift', 'postgres') -%}\n        \"left\" \n        {%- else -%}\n        left\n        {%- endif -%} = 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__account_types_tmp"], ["stg_netsuite2__account_types_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accounttype_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types_tmp", "model.netsuite_source.stg_netsuite2__account_types_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__account_types.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__account_types_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            `left`\n            \n        \n    \n as \n    \n        \n            \n            `left`\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,`left`= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__entities": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__entities", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__entities.sql", "original_file_path": "models/netsuite2/stg_netsuite2__entities.sql", "unique_id": "model.netsuite_source.stg_netsuite2__entities", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__entities"], "alias": "stg_netsuite2__entities", "checksum": {"name": "sha256", "checksum": "96c2b4dc091545f8b992e7fd62354e3df9fcf7bfe2756a44bad286e691454492"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all entities in Netsuite.", "columns": {"entity_id": {"name": "entity_id", "description": "Th \"The entity id of the entity used for the record.\"e unique identifier of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The unique identifier of the contact associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The  \"Unique identifier of the customer.\"unique identifier of the customer associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee_id": {"name": "employee_id", "description": "The unique identifier of the employee associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_name": {"name": "entity_name", "description": "The entity name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "Boolean indicating whether the entity is a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The unique identifier of the parent entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "The unique identifier of the project (job) associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_type": {"name": "entity_type", "description": "The entity type (Contact, CustJob, Job, etc).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Th \"The unique identifier of the vendor.\"e unique identifier of the vendor associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.365098, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entities`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__entities_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__entities_tmp')),\n                staging_columns=get_entity_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__entities_tmp"], ["stg_netsuite2__entities_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_entity_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__entities_tmp", "model.netsuite_source.stg_netsuite2__entities_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__entities.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entities_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    genericresource\n    \n as \n    \n    genericresource\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    othername\n    \n as \n    \n    othername\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    projecttemplate\n    \n as \n    \n    projecttemplate\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    toplevelparent\n    \n as \n    \n    toplevelparent\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_periods": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_periods", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_periods.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_periods.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_periods"], "alias": "stg_netsuite2__accounting_periods", "checksum": {"name": "sha256", "checksum": "8007d75811cab3d6e1a2041de1c45e56095ba2e376c83d96bdeb8909527b4f7d"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting_at": {"name": "starting_at", "description": "Timestamp of when the accounting period starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_at": {"name": "ending_at", "description": "Timestamp if when the accounting period ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_quarter": {"name": "is_quarter", "description": "Boolean indicating if the accounting period is the initial quarter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_year": {"name": "is_year", "description": "Boolean indicating if the accounting period is the initial period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Boolean indicating if the accounting period is an adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the accounting period is posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_all_locked": {"name": "is_all_locked", "description": "Boolean indicating if all the accounting periods are locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ar_locked": {"name": "is_ar_locked", "description": "Boolean indicating if the ar accounting period is locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ap_locked": {"name": "is_ap_locked", "description": "Boolean indicating if the ap accounting period is locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3515048, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_periods`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_periods_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_periods_tmp')),\n                staging_columns=get_netsuite2_accounting_periods_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__accounting_periods_tmp"], ["stg_netsuite2__accounting_periods_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounting_periods_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "model.netsuite_source.stg_netsuite2__accounting_periods_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_periods.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_periods_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_period_fiscal_cal", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_period_fiscal_cal"], "alias": "stg_netsuite2__accounting_period_fiscal_cal", "checksum": {"name": "sha256", "checksum": "2678f0fb6ff02c4a845196aa5ca3538a4a526d711e6fd3a36bda1bd96facb37d"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing the accounting fiscal calendar periods.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent fiscal calendar accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.348866, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_period_fiscal_cal`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_period_fiscal_cal_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_period_fiscal_cal_tmp')),\n                staging_columns=get_accountingperiodfiscalcalendars_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__accounting_period_fiscal_cal_tmp"], ["stg_netsuite2__accounting_period_fiscal_cal_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accountingperiodfiscalcalendars_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_period_fiscal_cal_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__customers": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__customers", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__customers.sql", "original_file_path": "models/netsuite2/stg_netsuite2__customers.sql", "unique_id": "model.netsuite_source.stg_netsuite2__customers", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__customers"], "alias": "stg_netsuite2__customers", "checksum": {"name": "sha256", "checksum": "d0d06f971eb7ccff2cbba7e2d5b137177f34095ea8781804fbea74025b14189f"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_external_id": {"name": "customer_external_id", "description": "Reference to the associated external customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "Boolean indicating if the customer is an individual person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Customers email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_billing_address_id": {"name": "default_billing_address_id", "description": "Reference to the associated billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_shipping_address_id": {"name": "default_shipping_address_id", "description": "Reference to the associated default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivables_account_id": {"name": "receivables_account_id", "description": "Reference to the associated receivables account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order_at": {"name": "date_first_order_at", "description": "Timestamp of when the first order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.361421, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__customers`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__customers_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__customers_tmp')),\n                staging_columns=get_netsuite2_customers_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('customers_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__customers_tmp"], ["stg_netsuite2__customers_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_customers_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__customers_tmp", "model.netsuite_source.stg_netsuite2__customers_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__customers.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__customers_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_book_subsidiaries", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_book_subsidiaries"], "alias": "stg_netsuite2__accounting_book_subsidiaries", "checksum": {"name": "sha256", "checksum": "c118a8fc8aada69254a37255a604f17695966064c01244257bc501aa4e843718"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing the various account books and the respective subsidiaries.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the accounting book subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.345891, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_book_subsidiaries`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__multibook_accounting_enabled', true))) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_book_subsidiaries_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_book_subsidiaries_tmp')),\n                staging_columns=get_accountingbooksubsidiaries_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__accounting_book_subsidiaries_tmp"], ["stg_netsuite2__accounting_book_subsidiaries_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accountingbooksubsidiaries_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_book_subsidiaries_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounts", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__accounts.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounts.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounts"], "alias": "stg_netsuite2__accounts", "checksum": {"name": "sha256", "checksum": "784d22fb98d78fd586615f77eacad4791287ef26e5638f184eb117fe0f008585"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounts set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_external_id": {"name": "account_external_id", "description": "Reference to the external account,", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Netsuite generate account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type_id": {"name": "account_type_id", "description": "Reference to the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_description": {"name": "account_description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferral_account_id": {"name": "deferral_account_id", "description": "Reference to the deferral account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cash_flow_rate_type": {"name": "cash_flow_rate_type", "description": "The cash flow rate type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_including_child_subs": {"name": "is_including_child_subs", "description": "Boolean indicating if the account includes sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the account is inactive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_summary": {"name": "is_summary", "description": "Boolean indicating if the account is a summary account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.354818, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounts`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounts_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounts_tmp')),\n                staging_columns=get_netsuite2_accounts_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('accounts_pass_through_columns') }}\n        \n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__accounts_tmp"], ["stg_netsuite2__accounts_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounts_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts_tmp", "model.netsuite_source.stg_netsuite2__accounts_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounts.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounts_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__transaction_lines": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transaction_lines", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__transaction_lines.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transaction_lines.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transaction_lines"], "alias": "stg_netsuite2__transaction_lines", "checksum": {"name": "sha256", "checksum": "f9c8883dafafdece7fb1ec344c62126790721198f540457a66a762808d96bc3b"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "Unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_number": {"name": "transaction_line_number", "description": "Netsuite generated number associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the transaction line is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_billable": {"name": "is_billable", "description": "Boolean indicating if the transaction line is billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cogs": {"name": "is_cogs", "description": "Boolean indicating if the transaction line is a cost of goods sold entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cleared": {"name": "is_cleared", "description": "Boolean indicating if the transaction line is cleared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_commitment_firm": {"name": "is_commitment_firm", "description": "Boolean indicating if the transaction line is a commitment firm.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_main_line": {"name": "is_main_line", "description": "Boolean indicating if the transaction line is a main line entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_tax_line": {"name": "is_tax_line", "description": "Boolean indicating if the transaction line is a tax line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3823202, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transaction_lines_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transaction_lines_tmp')),\n                staging_columns=get_netsuite2_transaction_lines_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transaction_lines_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__transaction_lines_tmp"], ["stg_netsuite2__transaction_lines_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_transaction_lines_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_lines_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transaction_lines.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__subsidiaries": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__subsidiaries", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__subsidiaries.sql", "original_file_path": "models/netsuite2/stg_netsuite2__subsidiaries.sql", "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__subsidiaries"], "alias": "stg_netsuite2__subsidiaries", "checksum": {"name": "sha256", "checksum": "3be3646f51e6cbce641a4069402d860f7db873e67e2cd8f73a58345d3a91b378"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all subsidiaries.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email address associated with the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_address_id": {"name": "main_address_id", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.376878, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__subsidiaries`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__subsidiaries_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__subsidiaries_tmp')),\n                staging_columns=get_netsuite2_subsidiaries_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('subsidiaries_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__subsidiaries_tmp"], ["stg_netsuite2__subsidiaries_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_subsidiaries_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__subsidiaries_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__subsidiaries.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__subsidiaries_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__entity_address": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__entity_address", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__entity_address.sql", "original_file_path": "models/netsuite2/stg_netsuite2__entity_address.sql", "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__entity_address"], "alias": "stg_netsuite2__entity_address", "checksum": {"name": "sha256", "checksum": "71fa72175fd4e45cae5f56d051c957830f1b8593aaa90b849d9610dd48668b2c"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing addresses and the various entities which they map.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_address": {"name": "full_address", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.367184, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entity_address`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__entity_address_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__entity_address_tmp')),\n                staging_columns=get_entityaddress_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__entity_address_tmp"], ["stg_netsuite2__entity_address_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_entityaddress_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__entity_address_tmp", "model.netsuite_source.stg_netsuite2__entity_address_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__entity_address.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entity_address_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__location_main_address": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__location_main_address", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__location_main_address.sql", "original_file_path": "models/netsuite2/stg_netsuite2__location_main_address.sql", "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__location_main_address"], "alias": "stg_netsuite2__location_main_address", "checksum": {"name": "sha256", "checksum": "71d9ec2fd5ab6d7c0a577fc3bbdc4444c6c266d474e88c3906f12a2d3798dfaf"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing the location main addresses.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_address": {"name": "full_address", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3736918, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__location_main_address`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__location_main_address_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__location_main_address_tmp')),\n                staging_columns=get_locationmainaddress_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__location_main_address_tmp"], ["stg_netsuite2__location_main_address_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_locationmainaddress_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp", "model.netsuite_source.stg_netsuite2__location_main_address_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__location_main_address.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__location_main_address_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__vendor_categories": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__vendor_categories", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__vendor_categories.sql", "original_file_path": "models/netsuite2/stg_netsuite2__vendor_categories.sql", "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__vendor_categories"], "alias": "stg_netsuite2__vendor_categories", "checksum": {"name": "sha256", "checksum": "97c7d63cfd24e9435a2fdb5c2754a8ced8122a34eb4ca8261ba58c1d0d6b85ad"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table containing categories and how they map to vendors.", "columns": {"vendor_category_id": {"name": "vendor_category_id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.385785, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendor_categories`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__using_vendor_categories', true))) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__vendor_categories_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__vendor_categories_tmp')),\n                staging_columns=get_vendorcategory_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__vendor_categories_tmp"], ["stg_netsuite2__vendor_categories_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_vendorcategory_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "model.netsuite_source.stg_netsuite2__vendor_categories_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__vendor_categories.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendor_categories_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__departments": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__departments", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__departments.sql", "original_file_path": "models/netsuite2/stg_netsuite2__departments.sql", "unique_id": "model.netsuite_source.stg_netsuite2__departments", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__departments"], "alias": "stg_netsuite2__departments", "checksum": {"name": "sha256", "checksum": "11fa478222fba8dfc22c4d63b005fe315d9fb8f98dbf5e5e3af23a3304d763ed"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all departments set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the department is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3631518, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__departments`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__departments_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__departments_tmp')),\n                staging_columns=get_netsuite2_departments_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('departments_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__departments_tmp"], ["stg_netsuite2__departments_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_departments_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__departments_tmp", "model.netsuite_source.stg_netsuite2__departments_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__departments.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__departments_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transaction_accounting_lines", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transaction_accounting_lines"], "alias": "stg_netsuite2__transaction_accounting_lines", "checksum": {"name": "sha256", "checksum": "8f11b9036edda818da5d940ba0b8f012be8602910c6488dac1b8f0c854165e1a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The tra \"The transaction id of referenced for the record.\"nsaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_amount": {"name": "net_amount", "description": "The net amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Reference to the accounting book of the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the entry is posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "Amount associated as a credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit_amount": {"name": "debit_amount", "description": "Amount associated as a debit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Total amount paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unpaid_amount": {"name": "unpaid_amount", "description": "Total amount unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3792331, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transaction_accounting_lines_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transaction_accounting_lines_tmp')),\n                staging_columns=get_transactionaccountingline_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_netsuite2__transaction_accounting_lines_tmp"], ["stg_netsuite2__transaction_accounting_lines_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_transactionaccountingline_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__consolidated_exchange_rates", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "original_file_path": "models/netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__consolidated_exchange_rates"], "alias": "stg_netsuite2__consolidated_exchange_rates", "checksum": {"name": "sha256", "checksum": "d818a9207416d913242d57089bfdf69d9c3f9e0c0d865ec51ae24b6b36a93c34"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"consolidated_exchange_rate_id": {"name": "consolidated_exchange_rate_id", "description": "unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_currency_id": {"name": "from_currency_id", "description": "The currency id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_currency_id": {"name": "to_currency_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The current rate associated with the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The historical rate of the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.357901, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__consolidated_exchange_rates`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__consolidated_exchange_rates_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__consolidated_exchange_rates_tmp')),\n                staging_columns=get_netsuite2_consolidated_exchange_rates_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('consolidated_exchange_rates_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__consolidated_exchange_rates_tmp"], ["stg_netsuite2__consolidated_exchange_rates_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__consolidated_exchange_rates_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_books": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_books", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_books.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_books.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_books"], "alias": "stg_netsuite2__accounting_books", "checksum": {"name": "sha256", "checksum": "e788e1638657cbb7b1ed9812d6cfb43592b178e898dc43019c94f3c309dc2339"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_name": {"name": "accounting_book_name", "description": "Name of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_book_id": {"name": "base_book_id", "description": "Reference to the base book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_period_id": {"name": "effective_period_id", "description": "Reference to the effective period of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment_only": {"name": "is_adjustment_only", "description": "Boolean indicating if the accounting book is an adjustment only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_consolidated": {"name": "is_consolidated", "description": "Boolean indicating if the accounting book is a consolidated entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_contingent_revenue_handling": {"name": "is_contingent_revenue_handling", "description": "Boolean indicating if the accounting book is contingent revenue handling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating if the accounting book is a primary entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_two_step_revenue_allocation": {"name": "is_two_step_revenue_allocation", "description": "Boolean indicating if the accounting book is a two step revenue allocation entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3478231, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_books`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__multibook_accounting_enabled', true))) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_books_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_books_tmp')),\n                staging_columns=get_netsuite2_accounting_books_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__accounting_books_tmp"], ["stg_netsuite2__accounting_books_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounting_books_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp", "model.netsuite_source.stg_netsuite2__accounting_books_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_books.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_books_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as STRING) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as STRING) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as STRING) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__items": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__items", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__items.sql", "original_file_path": "models/netsuite2/stg_netsuite2__items.sql", "unique_id": "model.netsuite_source.stg_netsuite2__items", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__items"], "alias": "stg_netsuite2__items", "checksum": {"name": "sha256", "checksum": "481ac95016324c6336bb123a29ea1ce74d208d53f4b6c3e63f7ee604f9874635"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing information about the items created in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "Item type name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_description": {"name": "sales_description", "description": "Sales description associated with the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "Reference to the asset account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "Reference to the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gain_loss_account_id": {"name": "gain_loss_account_id", "description": "Reference to the gain or loss account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "Reference to the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interco_expense_account_id": {"name": "interco_expense_account_id", "description": "Reference to the intercompany expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interco_income_account_id": {"name": "interco_income_account_id", "description": "Reference to the intercompany income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_expense_account_id": {"name": "deferred_expense_account_id", "description": "Reference to the deferred expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_account_id": {"name": "deferred_revenue_account_id", "description": "Reference to the deferred revenue account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.370273, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__items`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__items_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__items_tmp')),\n                staging_columns=get_netsuite2_items_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('items_pass_through_columns') }}\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__items_tmp"], ["stg_netsuite2__items_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_items_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__items_tmp", "model.netsuite_source.stg_netsuite2__items_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__items.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__items_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as INT64) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as INT64) as \n    \n    amortizationperiod\n    \n , \n    cast(null as INT64) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as STRING) as \n    \n    atpmethod\n    \n , \n    cast(null as STRING) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as FLOAT64) as \n    \n    averagecost\n    \n , \n    cast(null as INT64) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as INT64) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as INT64) as \n    \n    billingschedule\n    \n , \n    cast(null as INT64) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as INT64) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as STRING) as \n    \n    buildentireassembly\n    \n , \n    cast(null as FLOAT64) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as INT64) as \n    \n    consumptionunit\n    \n , \n    cast(null as STRING) as \n    \n    copydescription\n    \n , \n    cast(null as FLOAT64) as \n    \n    cost\n    \n , \n    cast(null as FLOAT64) as \n    \n    costestimate\n    \n , \n    cast(null as STRING) as \n    \n    costestimatetype\n    \n , \n    cast(null as STRING) as \n    \n    costingmethod\n    \n , \n    cast(null as STRING) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as STRING) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    createddate\n    \n , \n    cast(null as INT64) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as STRING) as \n    \n    createjob\n    \n , \n    cast(null as INT64) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as INT64) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as STRING) as \n    \n    deferrevrec\n    \n , \n    cast(null as FLOAT64) as \n    \n    demandmodifier\n    \n , \n    cast(null as STRING) as \n    \n    demandsource\n    \n , \n    cast(null as INT64) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as STRING) as \n    \n    directrevenueposting\n    \n , \n    cast(null as STRING) as \n    \n    displayname\n    \n , \n    cast(null as INT64) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as STRING) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as STRING) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as INT64) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as STRING) as \n    \n    externalid\n    \n , \n    cast(null as FLOAT64) as \n    \n    fixedlotsize\n    \n , \n    cast(null as INT64) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as STRING) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as FLOAT64) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as STRING) as \n    \n    generateaccruals\n    \n , \n    cast(null as FLOAT64) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as STRING) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as INT64) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as INT64) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as INT64) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as STRING) as \n    \n    isdropshipitem\n    \n , \n    cast(null as STRING) as \n    \n    isfulfillable\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    islotitem\n    \n , \n    cast(null as STRING) as \n    \n    isonline\n    \n , \n    cast(null as STRING) as \n    \n    isphantom\n    \n , \n    cast(null as STRING) as \n    \n    isserialitem\n    \n , \n    cast(null as STRING) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as STRING) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as STRING) as \n    \n    itemid\n    \n , \n    cast(null as INT64) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as FLOAT64) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as INT64) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as STRING) as \n    \n    manufacturer\n    \n , \n    cast(null as STRING) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as STRING) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as STRING) as \n    \n    matrixtype\n    \n , \n    cast(null as INT64) as \n    \n    maximumquantity\n    \n , \n    cast(null as INT64) as \n    \n    minimumquantity\n    \n , \n    cast(null as STRING) as \n    \n    mpn\n    \n , \n    cast(null as STRING) as \n    \n    nextagcategory\n    \n , \n    cast(null as STRING) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as STRING) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as INT64) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as STRING) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as INT64) as \n    \n    preferredlocation\n    \n , \n    cast(null as INT64) as \n    \n    pricinggroup\n    \n , \n    cast(null as STRING) as \n    \n    printitems\n    \n , \n    cast(null as INT64) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as INT64) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as INT64) as \n    \n    projectexpensetype\n    \n , \n    cast(null as INT64) as \n    \n    projecttemplate\n    \n , \n    cast(null as STRING) as \n    \n    purchasedescription\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as INT64) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as INT64) as \n    \n    purchaseunit\n    \n , \n    cast(null as INT64) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as STRING) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as INT64) as \n    \n    rescheduleindays\n    \n , \n    cast(null as INT64) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as FLOAT64) as \n    \n    residual\n    \n , \n    cast(null as INT64) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as INT64) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as INT64) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as INT64) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as STRING) as \n    \n    roundupascomponent\n    \n , \n    cast(null as FLOAT64) as \n    \n    safetystocklevel\n    \n , \n    cast(null as INT64) as \n    \n    saleunit\n    \n , \n    cast(null as INT64) as \n    \n    scrapacct\n    \n , \n    cast(null as STRING) as \n    \n    searchkeywords\n    \n , \n    cast(null as STRING) as \n    \n    seasonaldemand\n    \n , \n    cast(null as STRING) as \n    \n    shipindividually\n    \n , \n    cast(null as INT64) as \n    \n    shippackage\n    \n , \n    cast(null as FLOAT64) as \n    \n    shippingcost\n    \n , \n    cast(null as STRING) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as STRING) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as INT64) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as STRING) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as STRING) as \n    \n    sitemappriority\n    \n , \n    cast(null as STRING) as \n    \n    stockdescription\n    \n , \n    cast(null as INT64) as \n    \n    stockunit\n    \n , \n    cast(null as STRING) as \n    \n    storedescription\n    \n , \n    cast(null as INT64) as \n    \n    storedisplayimage\n    \n , \n    cast(null as STRING) as \n    \n    storedisplayname\n    \n , \n    cast(null as INT64) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as STRING) as \n    \n    subtype\n    \n , \n    cast(null as STRING) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as STRING) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as INT64) as \n    \n    supplytimefence\n    \n , \n    cast(null as STRING) as \n    \n    supplytype\n    \n , \n    cast(null as FLOAT64) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as FLOAT64) as \n    \n    totalvalue\n    \n , \n    cast(null as FLOAT64) as \n    \n    transferprice\n    \n , \n    cast(null as INT64) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as INT64) as \n    \n    unitstype\n    \n , \n    cast(null as STRING) as \n    \n    upccode\n    \n , \n    cast(null as STRING) as \n    \n    usebins\n    \n , \n    cast(null as STRING) as \n    \n    usemarginalrates\n    \n , \n    cast(null as STRING) as \n    \n    vendorname\n    \n , \n    cast(null as INT64) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as STRING) as \n    \n    vsoedelivered\n    \n , \n    cast(null as STRING) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as STRING) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as FLOAT64) as \n    \n    weight\n    \n , \n    cast(null as INT64) as \n    \n    weightunit\n    \n , \n    cast(null as STRING) as \n    \n    weightunits\n    \n , \n    cast(null as INT64) as \n    \n    wipacct\n    \n , \n    cast(null as INT64) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as STRING) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__currencies": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__currencies", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__currencies.sql", "original_file_path": "models/netsuite2/stg_netsuite2__currencies.sql", "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__currencies"], "alias": "stg_netsuite2__currencies", "checksum": {"name": "sha256", "checksum": "1732f9e10cdf1c28cb34fff21a98ce324488fb97373e28f948479653fddb4f52"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all currency information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "Currency symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.3587961, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__currencies`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__currencies_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__currencies_tmp')),\n                staging_columns=get_netsuite2_currencies_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__currencies_tmp"], ["stg_netsuite2__currencies_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_currencies_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies_tmp", "model.netsuite_source.stg_netsuite2__currencies_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__currencies.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__currencies_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__locations": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__locations", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/stg_netsuite2__locations.sql", "original_file_path": "models/netsuite2/stg_netsuite2__locations.sql", "unique_id": "model.netsuite_source.stg_netsuite2__locations", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__locations"], "alias": "stg_netsuite2__locations", "checksum": {"name": "sha256", "checksum": "f209763d31da50bf88ec1381c272ebc8800cec9be699a5d2bb3d35ee83a213c3"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_address_id": {"name": "main_address_id", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.375032, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__locations`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__locations_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__locations_tmp')),\n                staging_columns=get_netsuite2_locations_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('locations_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite2__locations_tmp"], ["stg_netsuite2__locations_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_locations_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__locations_tmp", "model.netsuite_source.stg_netsuite2__locations_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__locations.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__locations_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__subsidiaries_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__subsidiaries_tmp"], "alias": "stg_netsuite2__subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "6666ee27a531fb4f909f1a5bb1ed78860aaab0fce53c3a7d64110b1bb94f8978"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.777401, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__subsidiaries_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_subsidiaries') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "subsidiary"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.subsidiary"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_subsidiary_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__transactions_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transactions_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transactions_tmp"], "alias": "stg_netsuite2__transactions_tmp", "checksum": {"name": "sha256", "checksum": "1625f18a3c8501316cb07107ba8fa7193670933f4257bbb1d9af4ba906a2dad0"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.781161, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transactions_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transactions') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "transaction"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__entity_address_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__entity_address_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__entity_address_tmp"], "alias": "stg_netsuite2__entity_address_tmp", "checksum": {"name": "sha256", "checksum": "fcf2a49835607b81e8b532e6103522e1ae39c31c40cab59ac1afe6d989ddf459"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.784848, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entity_address_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_entity_address') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "entity_address"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.entity_address"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entity_address_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__account_types_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__account_types_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__account_types_tmp"], "alias": "stg_netsuite2__account_types_tmp", "checksum": {"name": "sha256", "checksum": "3415db1a2707377cc7b0653882967c59ed725db0dd959536151d511a41c678c1"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.788526, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__account_types_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_account_types') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "account_type"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.account_type"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_type_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_periods_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_periods_tmp"], "alias": "stg_netsuite2__accounting_periods_tmp", "checksum": {"name": "sha256", "checksum": "0149cbd8d601dfcba0487e44f82d6ec166fb513775670cf614d6c6be4164c437"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.792829, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_periods_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_accounting_periods') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "accounting_period"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_period"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__jobs_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__jobs_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__jobs_tmp"], "alias": "stg_netsuite2__jobs_tmp", "checksum": {"name": "sha256", "checksum": "8b827654926613543b3034650058d6335e1523f360a56d945090da65337b138f"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.796488, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__jobs_tmp`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__using_jobs', true))) }}\n\nselect * \nfrom {{ var('netsuite2_jobs') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "job"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.job"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_job_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transaction_lines_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transaction_lines_tmp"], "alias": "stg_netsuite2__transaction_lines_tmp", "checksum": {"name": "sha256", "checksum": "15ebc09543829a7c09c0e49c546ffa8aae2b509054f26f5cbf06f3aa31731c80"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.8004348, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transaction_lines') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "transaction_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction_line"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_line_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounts_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounts_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounts_tmp"], "alias": "stg_netsuite2__accounts_tmp", "checksum": {"name": "sha256", "checksum": "2a8d008c5c30f44eca40fa5871ea2579d0b51cf45cf10a39addb620fd870259f"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.804136, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounts_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_accounts') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "account"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.account"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__customers_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__customers_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__customers_tmp"], "alias": "stg_netsuite2__customers_tmp", "checksum": {"name": "sha256", "checksum": "e2db5f557cfe416e87f1b8fb38e2b62277871d2ed4c8b3f0ba83f35bcda6ecba"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.8079228, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__customers_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_customers') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.customer"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_customer_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__entities_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__entities_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__entities_tmp"], "alias": "stg_netsuite2__entities_tmp", "checksum": {"name": "sha256", "checksum": "bb55a24286c0f26fd9e40a0f56b694fed4a736385a94deeb64ee3360c1310c29"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.812153, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entities_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_entities') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "entity"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.entity"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entities_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__currencies_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__currencies_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__currencies_tmp"], "alias": "stg_netsuite2__currencies_tmp", "checksum": {"name": "sha256", "checksum": "1f06a4a8f01197479386859c92462ba485f304e6c944130f66424fb4511a5799"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.815833, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__currencies_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_currencies') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "currency"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.currency"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_currency_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__vendors_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__vendors_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__vendors_tmp"], "alias": "stg_netsuite2__vendors_tmp", "checksum": {"name": "sha256", "checksum": "e18a924a82a09bd660ba8517d492632efd1c2eabb10e4979e93f422e558d8022"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.8194911, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendors_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_vendors') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "vendor"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.vendor"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__items_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__items_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__items_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__items_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__items_tmp"], "alias": "stg_netsuite2__items_tmp", "checksum": {"name": "sha256", "checksum": "521a428cea21fb1a256cb1a87335aebc92154e37ead547e3e21b5deeae0ea6c2"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.823151, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__items_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_items') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.item"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__items_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_item_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_books_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_books_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_books_tmp"], "alias": "stg_netsuite2__accounting_books_tmp", "checksum": {"name": "sha256", "checksum": "c5d1ee56d0181cee10a2ab0599060ec8954702bfebc8663cc523ae85849de31d"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.826905, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_books_tmp`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__multibook_accounting_enabled', true))) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_books') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "accounting_book"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_book"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_period_fiscal_cal_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_period_fiscal_cal_tmp"], "alias": "stg_netsuite2__accounting_period_fiscal_cal_tmp", "checksum": {"name": "sha256", "checksum": "d88060ffff63d2d9030c23de1a17a15dd7a34ecda89e323dc7e9cf140a04b03a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.832001, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_period_fiscal_cal_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_period_fiscal_calendars') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "accounting_period_fiscal_calendars"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_period_fiscal_calendars"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_fiscal_cal_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__vendor_categories_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__vendor_categories_tmp"], "alias": "stg_netsuite2__vendor_categories_tmp", "checksum": {"name": "sha256", "checksum": "6dd5fe29284858908fa31920941227618d5bc33eee62ff15e447357c5f1d791a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.883666, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendor_categories_tmp`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__using_vendor_categories', true))) }}\n\nselect * \nfrom {{ var('netsuite2_vendor_categories') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "vendor_category"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.vendor_category"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_category_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__accounting_book_subsidiaries_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_book_subsidiaries_tmp"], "alias": "stg_netsuite2__accounting_book_subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "c7c5eee54b160ba7e7cc3ca69b4ff74939dcb9ca44966e3e1ef95650743e4d03"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.887764, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_book_subsidiaries_tmp`", "raw_code": "{{ config(enabled=(var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2') and var('netsuite2__multibook_accounting_enabled', true))) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_book_subsidiaries') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "accounting_book_subsidiaries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_book_subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_sub_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__transaction_accounting_lines_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transaction_accounting_lines_tmp"], "alias": "stg_netsuite2__transaction_accounting_lines_tmp", "checksum": {"name": "sha256", "checksum": "91bfd0a5babb67c22979bdb03a16a185b90199fc905d8f55ec34516aa3674991"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.891687, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transaction_accounting_lines') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "transaction_accounting_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction_accounting_line"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_tran_acct_line_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__location_main_address_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__location_main_address_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__location_main_address_tmp"], "alias": "stg_netsuite2__location_main_address_tmp", "checksum": {"name": "sha256", "checksum": "360d4cd8b3a246007978c640ed7a423c49b628411bda7d8aab78f431f973d4be"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.895374, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__location_main_address_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_location_main_address') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "location_main_address"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.location_main_address"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_main_address_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__locations_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__locations_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__locations_tmp"], "alias": "stg_netsuite2__locations_tmp", "checksum": {"name": "sha256", "checksum": "f9747c40667070b7685c826bbaa541ec10a5dbcb5682fad9e65aa2b28b8b7e42"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.8990898, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__locations_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_locations') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "location"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.location"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__departments_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__departments_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__departments_tmp"], "alias": "stg_netsuite2__departments_tmp", "checksum": {"name": "sha256", "checksum": "d5a6479a4a567ab3f6c9f85f6a42fb752ab7889065c4f63f1ded657023ff54c9"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.903531, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__departments_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_departments') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "department"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.department"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_department_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__classes_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__classes_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__classes_tmp"], "alias": "stg_netsuite2__classes_tmp", "checksum": {"name": "sha256", "checksum": "c5d7c66aef27878ade36b031c9e26b523c76373ac106b0f7b618a8e76f3518a2"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.9071832, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__classes_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_classes') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "classification"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.classification"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_classification_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite2__consolidated_exchange_rates_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__consolidated_exchange_rates_tmp"], "alias": "stg_netsuite2__consolidated_exchange_rates_tmp", "checksum": {"name": "sha256", "checksum": "8cfcb1761c48b4f9b640cc61023b4106f86122fd925bea98200d2453da892c36"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404469.910849, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__consolidated_exchange_rates_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_consolidated_exchange_rates') }}", "language": "sql", "refs": [], "sources": [["netsuite2", "consolidated_exchange_rate"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.consolidated_exchange_rate"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_consolidated_exchange_rate_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__transactions": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__transactions", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__transactions.sql", "original_file_path": "models/netsuite/stg_netsuite__transactions.sql", "unique_id": "model.netsuite_source.stg_netsuite__transactions", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__transactions"], "alias": "stg_netsuite__transactions", "checksum": {"name": "sha256", "checksum": "229453298c19897d353712750c015e5fb7c80d41715a69a04bdb44c1d42dd50a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The unique identifier of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction (ie. Paid In Full, Open, Cancelled).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "The timestamp of the transaction due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The transaction type (ie. Bill, Check, Deposit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany": {"name": "is_intercompany", "description": "Value indicating whether the transaction is intercompany (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_advanced_intercompany": {"name": "is_advanced_intercompany", "description": "Value indicating whether the transaction is an advanced intercompany journal entry (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.29103, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transactions`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__transactions_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__transactions_tmp')),\n                staging_columns=get_transactions_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transactions_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__transactions_tmp"], ["stg_netsuite__transactions_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_transactions_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__transactions_tmp", "model.netsuite_source.stg_netsuite__transactions_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__transactions.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transactions_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__customers": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__customers", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__customers.sql", "original_file_path": "models/netsuite/stg_netsuite__customers.sql", "unique_id": "model.netsuite_source.stg_netsuite__customers", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__customers"], "alias": "stg_netsuite__customers", "checksum": {"name": "sha256", "checksum": "c9e469c13b1608752f66936b6d5f93e6c21385726175cc422a3dcae92ac46025"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "The unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_external_id": {"name": "customer_external_id", "description": "The unique identifier of the external customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The zipcode of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order_at": {"name": "date_first_order_at", "description": "The timestamp of the customers first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.279897, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__customers`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__customers_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__customers_tmp')),\n                staging_columns=get_customers_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('customers_pass_through_columns') }}\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__customers_tmp"], ["stg_netsuite__customers_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_customers_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__customers_tmp", "model.netsuite_source.stg_netsuite__customers_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__customers.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__customers_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as STRING) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as STRING) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounting_books": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounting_books", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__accounting_books.sql", "original_file_path": "models/netsuite/stg_netsuite__accounting_books.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounting_books"], "alias": "stg_netsuite__accounting_books", "checksum": {"name": "sha256", "checksum": "1979e4645a6245ff201816e275fd790f10d92570aa910990ef7ac5a145a904f7"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating whether it is a primary accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2696419, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_books`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounting_books_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounting_books_tmp')),\n                staging_columns=get_accounting_books_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__accounting_books_tmp"], ["stg_netsuite__accounting_books_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accounting_books_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books_tmp", "model.netsuite_source.stg_netsuite__accounting_books_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounting_books.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_books_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as STRING) as \n    \n    accounting_book_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    base_book_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_created\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as FLOAT64) as \n    \n    effective_period_id\n    \n , \n    cast(null as STRING) as \n    \n    form_template_component_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    form_template_id\n    \n , \n    cast(null as STRING) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as STRING) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as STRING) as \n    \n    is_consolidated\n    \n , \n    cast(null as STRING) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as STRING) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as STRING) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as STRING) as \n    \n    status\n    \n , \n    cast(null as STRING) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__consolidated_exchange_rates", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__consolidated_exchange_rates.sql", "original_file_path": "models/netsuite/stg_netsuite__consolidated_exchange_rates.sql", "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__consolidated_exchange_rates"], "alias": "stg_netsuite__consolidated_exchange_rates", "checksum": {"name": "sha256", "checksum": "6a4909b08f327411a1947017c8f33d333e541e91c578c6c180dd754ebef85b9c"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"consolidated_exchange_rate_id": {"name": "consolidated_exchange_rate_id", "description": "The unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "The accounting book the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The consolidated exchange rates current rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The consolidated exchange rates historical rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.276875, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__consolidated_exchange_rates`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__consolidated_exchange_rates_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__consolidated_exchange_rates_tmp')),\n                staging_columns=get_consolidated_exchange_rates_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('consolidated_exchange_rates_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__consolidated_exchange_rates_tmp"], ["stg_netsuite__consolidated_exchange_rates_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_consolidated_exchange_rates_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__consolidated_exchange_rates.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__consolidated_exchange_rates_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__transaction_lines": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__transaction_lines", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__transaction_lines.sql", "original_file_path": "models/netsuite/stg_netsuite__transaction_lines.sql", "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__transaction_lines"], "alias": "stg_netsuite__transaction_lines", "checksum": {"name": "sha256", "checksum": "439d9f1cc5d341305a11759ce2f4be9e154524b992103409aef648f97c471b80"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The subsidiary id of the subsidiary which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the account linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The company id of the company linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The item id of the item which is included in the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "non_posting_line": {"name": "non_posting_line", "description": "Value indicating whether the transaction line is a non posting line (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The class id of the class which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The location id of the location which the transaction line took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The department id of the department linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2887838, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__transaction_lines_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__transaction_lines_tmp')),\n                staging_columns=get_transaction_lines_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transaction_lines_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite__transaction_lines_tmp"], ["stg_netsuite__transaction_lines_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_transaction_lines_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp", "model.netsuite_source.stg_netsuite__transaction_lines_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__transaction_lines.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__income_accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__income_accounts", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__income_accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__income_accounts.sql", "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__income_accounts"], "alias": "stg_netsuite__income_accounts", "checksum": {"name": "sha256", "checksum": "299fb45e200223bd290f01314ad47a4619932d39f3b04fe929a82c5ee8a0fe2b"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all income accounts.", "columns": {"income_account_id": {"name": "income_account_id", "description": "The unique identifier of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The income account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.283038, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__income_accounts`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__income_accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__income_accounts_tmp')),\n                staging_columns=get_income_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__income_accounts_tmp"], ["stg_netsuite__income_accounts_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_income_accounts_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts_tmp", "model.netsuite_source.stg_netsuite__income_accounts_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__income_accounts.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__income_accounts_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as STRING) as \n    \n    comments\n    \n , \n    cast(null as FLOAT64) as \n    \n    current_balance\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as STRING) as \n    \n    desription\n    \n , \n    cast(null as STRING) as \n    \n    full_name\n    \n , \n    cast(null as STRING) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as STRING) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as STRING) as \n    \n    is_summary\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__expense_accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__expense_accounts", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__expense_accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__expense_accounts.sql", "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__expense_accounts"], "alias": "stg_netsuite__expense_accounts", "checksum": {"name": "sha256", "checksum": "f7c1276dddff15a68a1de673f503dc127efb4a2932756ea28c09c231aaf52b2c"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all expense accounts.", "columns": {"expense_account_id": {"name": "expense_account_id", "description": "The unique identifier of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The expense account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.281912, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__expense_accounts`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__expense_accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__expense_accounts_tmp')),\n                staging_columns=get_expense_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__expense_accounts_tmp"], ["stg_netsuite__expense_accounts_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_expense_accounts_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp", "model.netsuite_source.stg_netsuite__expense_accounts_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__expense_accounts.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__expense_accounts_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as STRING) as \n    \n    comments\n    \n , \n    cast(null as FLOAT64) as \n    \n    current_balance\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as STRING) as \n    \n    desription\n    \n , \n    cast(null as STRING) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as STRING) as \n    \n    full_name\n    \n , \n    cast(null as STRING) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as STRING) as \n    \n    is_summary\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__vendors": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__vendors", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__vendors.sql", "original_file_path": "models/netsuite/stg_netsuite__vendors.sql", "unique_id": "model.netsuite_source.stg_netsuite__vendors", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__vendors"], "alias": "stg_netsuite__vendors", "checksum": {"name": "sha256", "checksum": "c588235e317970753f51be3cb41b70da9823d2476a989705e6f92aab38dd850d"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all vendor information.", "columns": {"vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_type_id": {"name": "vendor_type_id", "description": "The vendor type the vendor is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The vendor's company name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_date_at": {"name": "create_date_at", "description": "The timestamp of the date the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.293032, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendors`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__vendors_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__vendors_tmp')),\n                staging_columns=get_vendors_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('vendors_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__vendors_tmp"], ["stg_netsuite__vendors_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_vendors_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__vendors_tmp", "model.netsuite_source.stg_netsuite__vendors_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__vendors.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendors_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    account_owner\n    \n , \n    cast(null as STRING) as \n    \n    accountnumber\n    \n , \n    cast(null as STRING) as \n    \n    accounts_email\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_revenue\n    \n , \n    cast(null as STRING) as \n    \n    auto_renewals\n    \n , \n    cast(null as STRING) as \n    \n    auto_send_statements\n    \n , \n    cast(null as STRING) as \n    \n    billaddress\n    \n , \n    cast(null as FLOAT64) as \n    \n    billing_class_id\n    \n , \n    cast(null as STRING) as \n    \n    city\n    \n , \n    cast(null as STRING) as \n    \n    comments\n    \n , \n    cast(null as STRING) as \n    \n    companyname\n    \n , \n    cast(null as STRING) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as FLOAT64) as \n    \n    creditlimit\n    \n , \n    cast(null as FLOAT64) as \n    \n    currency_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as STRING) as \n    \n    dic\n    \n , \n    cast(null as STRING) as \n    \n    email\n    \n , \n    cast(null as STRING) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as STRING) as \n    \n    email_cash_sales\n    \n , \n    cast(null as STRING) as \n    \n    email_credit_notes\n    \n , \n    cast(null as STRING) as \n    \n    email_invoices\n    \n , \n    cast(null as STRING) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as STRING) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as STRING) as \n    \n    email_quotes\n    \n , \n    cast(null as STRING) as \n    \n    email_sales_orders\n    \n , \n    cast(null as STRING) as \n    \n    email_statements\n    \n , \n    cast(null as STRING) as \n    \n    employee_number\n    \n , \n    cast(null as STRING) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as FLOAT64) as \n    \n    expense_account_id\n    \n , \n    cast(null as STRING) as \n    \n    fax\n    \n , \n    cast(null as STRING) as \n    \n    full_name\n    \n , \n    cast(null as STRING) as \n    \n    home_phone\n    \n , \n    cast(null as STRING) as \n    \n    hris_id\n    \n , \n    cast(null as STRING) as \n    \n    ico\n    \n , \n    cast(null as STRING) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as FLOAT64) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    in_transit_balance\n    \n , \n    cast(null as STRING) as \n    \n    incoterm\n    \n , \n    cast(null as FLOAT64) as \n    \n    industry_id\n    \n , \n    cast(null as STRING) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as STRING) as \n    \n    invoicing_details\n    \n , \n    cast(null as STRING) as \n    \n    is1099eligible\n    \n , \n    cast(null as STRING) as \n    \n    is_partner\n    \n , \n    cast(null as STRING) as \n    \n    is_person\n    \n , \n    cast(null as STRING) as \n    \n    isemailhtml\n    \n , \n    cast(null as STRING) as \n    \n    isemailpdf\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as FLOAT64) as \n    \n    labor_cost\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    last_modified_date\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    last_sales_activity\n    \n , \n    cast(null as STRING) as \n    \n    line1\n    \n , \n    cast(null as STRING) as \n    \n    line2\n    \n , \n    cast(null as STRING) as \n    \n    line3\n    \n , \n    cast(null as STRING) as \n    \n    loginaccess\n    \n , \n    cast(null as STRING) as \n    \n    lsa_link\n    \n , \n    cast(null as STRING) as \n    \n    lsa_link_name\n    \n , \n    cast(null as STRING) as \n    \n    mobile_phone\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    msa_effective_date\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as FLOAT64) as \n    \n    no__of_employees\n    \n , \n    cast(null as FLOAT64) as \n    \n    openbalance\n    \n , \n    cast(null as FLOAT64) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as FLOAT64) as \n    \n    payables_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    payment_terms_id\n    \n , \n    cast(null as STRING) as \n    \n    phone\n    \n , \n    cast(null as FLOAT64) as \n    \n    prepayment_balance\n    \n , \n    cast(null as STRING) as \n    \n    printoncheckas\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as STRING) as \n    \n    purchases_email\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as FLOAT64) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as STRING) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as STRING) as \n    \n    salesforce_id\n    \n , \n    cast(null as STRING) as \n    \n    shipaddress\n    \n , \n    cast(null as STRING) as \n    \n    shipping_email\n    \n , \n    cast(null as STRING) as \n    \n    state\n    \n , \n    cast(null as FLOAT64) as \n    \n    subsidiary\n    \n , \n    cast(null as STRING) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    tax_contact_id\n    \n , \n    cast(null as STRING) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as STRING) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as STRING) as \n    \n    tax_number\n    \n , \n    cast(null as STRING) as \n    \n    taxidnum\n    \n , \n    cast(null as FLOAT64) as \n    \n    time_approver_id\n    \n , \n    cast(null as STRING) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as STRING) as \n    \n    uen\n    \n , \n    cast(null as FLOAT64) as \n    \n    unbilled_orders\n    \n , \n    cast(null as FLOAT64) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as STRING) as \n    \n    url\n    \n , \n    cast(null as STRING) as \n    \n    vat_registration_no\n    \n , \n    cast(null as STRING) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as STRING) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__classes": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__classes", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__classes.sql", "original_file_path": "models/netsuite/stg_netsuite__classes.sql", "unique_id": "model.netsuite_source.stg_netsuite__classes", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__classes"], "alias": "stg_netsuite__classes", "checksum": {"name": "sha256", "checksum": "edf56a2971642640474b042c3ec91efc7aa294b9fb3861a1bd747b61af23205b"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all classes set up in Netsuite.", "columns": {"class_id": {"name": "class_id", "description": "The unique identifier of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.274577, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__classes`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__classes_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__classes_tmp')),\n                staging_columns=get_classes_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('classes_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite__classes_tmp"], ["stg_netsuite__classes_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_classes_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__classes_tmp", "model.netsuite_source.stg_netsuite__classes_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__classes.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__classes_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__subsidiaries": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__subsidiaries", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__subsidiaries.sql", "original_file_path": "models/netsuite/stg_netsuite__subsidiaries.sql", "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__subsidiaries"], "alias": "stg_netsuite__subsidiaries", "checksum": {"name": "sha256", "checksum": "f6477b555a1708adf2e9853d11edeba88e1fe42f4638d1f377e80f7a5523a622"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all subsidiaries.", "columns": {"subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id associated with the fiscal calendar the subsidiary is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The parent subsidiary id which the subsidiary is under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2865438, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__subsidiaries`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__subsidiaries_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__subsidiaries_tmp')),\n                staging_columns=get_subsidiaries_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('subsidiaries_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__subsidiaries_tmp"], ["stg_netsuite__subsidiaries_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_subsidiaries_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp", "model.netsuite_source.stg_netsuite__subsidiaries_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__subsidiaries.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__subsidiaries_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    address\n    \n , \n    cast(null as STRING) as \n    \n    address1\n    \n , \n    cast(null as STRING) as \n    \n    address2\n    \n , \n    cast(null as FLOAT64) as \n    \n    base_currency_id\n    \n , \n    cast(null as STRING) as \n    \n    branch_id\n    \n , \n    cast(null as STRING) as \n    \n    brn\n    \n , \n    cast(null as STRING) as \n    \n    city\n    \n , \n    cast(null as STRING) as \n    \n    country\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as STRING) as \n    \n    edition\n    \n , \n    cast(null as STRING) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as STRING) as \n    \n    full_name\n    \n , \n    cast(null as STRING) as \n    \n    is_elimination\n    \n , \n    cast(null as STRING) as \n    \n    is_moss\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    isinactive_bool\n    \n , \n    cast(null as STRING) as \n    \n    legal_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as STRING) as \n    \n    return_address\n    \n , \n    cast(null as STRING) as \n    \n    return_address1\n    \n , \n    cast(null as STRING) as \n    \n    return_address2\n    \n , \n    cast(null as STRING) as \n    \n    return_city\n    \n , \n    cast(null as STRING) as \n    \n    return_country\n    \n , \n    cast(null as STRING) as \n    \n    return_state\n    \n , \n    cast(null as STRING) as \n    \n    return_zipcode\n    \n , \n    cast(null as STRING) as \n    \n    shipping_address\n    \n , \n    cast(null as STRING) as \n    \n    shipping_address1\n    \n , \n    cast(null as STRING) as \n    \n    shipping_address2\n    \n , \n    cast(null as STRING) as \n    \n    shipping_city\n    \n , \n    cast(null as STRING) as \n    \n    shipping_country\n    \n , \n    cast(null as STRING) as \n    \n    shipping_state\n    \n , \n    cast(null as STRING) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as STRING) as \n    \n    state\n    \n , \n    cast(null as STRING) as \n    \n    state_tax_number\n    \n , \n    cast(null as FLOAT64) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as STRING) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as STRING) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as STRING) as \n    \n    uen\n    \n , \n    cast(null as STRING) as \n    \n    url\n    \n , \n    cast(null as STRING) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounts", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__accounts.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounts", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounts"], "alias": "stg_netsuite__accounts", "checksum": {"name": "sha256", "checksum": "510d294af59df7ffa89fbfad25c7b865acc90b656833abb3aacf861889f170d1"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounts set up in Netsuite.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The accounts associated parent account id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the type of the account (ie. Bank, Equity, Income, Expense).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Value indicating whether the account is on the leftside (debit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Value indicating whether the account is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2738402, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounts`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounts_tmp')),\n                staging_columns=get_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('accounts_pass_through_columns') }}\n        \n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite__accounts_tmp"], ["stg_netsuite__accounts_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accounts_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounts_tmp", "model.netsuite_source.stg_netsuite__accounts_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounts.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounts_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as STRING) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__items": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__items", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__items.sql", "original_file_path": "models/netsuite/stg_netsuite__items.sql", "unique_id": "model.netsuite_source.stg_netsuite__items", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__items"], "alias": "stg_netsuite__items", "checksum": {"name": "sha256", "checksum": "fba43c296243f470c88afcb940b71f6808f5ba3f6f9e00d086463b14d4e79e73"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing information about the items created in Netsuite.", "columns": {"item_id": {"name": "item_id", "description": "The unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The type of the item (ie. Markup, Service, Discount).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_description": {"name": "sales_description", "description": "The items sales description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.284075, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__items`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__items_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__items_tmp')),\n                staging_columns=get_items_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('items_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__items_tmp"], ["stg_netsuite__items_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_items_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__items_tmp", "model.netsuite_source.stg_netsuite__items_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__items.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__items_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as FLOAT64) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    asset_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    atp_lead_time\n    \n , \n    cast(null as STRING) as \n    \n    atp_method\n    \n , \n    cast(null as STRING) as \n    \n    available_to_partners\n    \n , \n    cast(null as STRING) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as FLOAT64) as \n    \n    averagecost\n    \n , \n    cast(null as FLOAT64) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as STRING) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as FLOAT64) as \n    \n    class_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as STRING) as \n    \n    commodity_code\n    \n , \n    cast(null as FLOAT64) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    cost_0\n    \n , \n    cast(null as STRING) as \n    \n    cost_category\n    \n , \n    cast(null as STRING) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as STRING) as \n    \n    costing_method\n    \n , \n    cast(null as STRING) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as STRING) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    created\n    \n , \n    cast(null as FLOAT64) as \n    \n    current_on_order_count\n    \n , \n    cast(null as FLOAT64) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as FLOAT64) as \n    \n    default_return_cost\n    \n , \n    cast(null as FLOAT64) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as STRING) as \n    \n    demand_source\n    \n , \n    cast(null as FLOAT64) as \n    \n    demand_time_fence\n    \n , \n    cast(null as FLOAT64) as \n    \n    department_id\n    \n , \n    cast(null as STRING) as \n    \n    deposit\n    \n , \n    cast(null as STRING) as \n    \n    displayname\n    \n , \n    cast(null as STRING) as \n    \n    distribution_category\n    \n , \n    cast(null as STRING) as \n    \n    distribution_network\n    \n , \n    cast(null as FLOAT64) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as STRING) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    expense_account_id\n    \n , \n    cast(null as STRING) as \n    \n    featureddescription\n    \n , \n    cast(null as STRING) as \n    \n    featureditem\n    \n , \n    cast(null as FLOAT64) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as FLOAT64) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as STRING) as \n    \n    fraud_risk\n    \n , \n    cast(null as STRING) as \n    \n    full_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    handling_cost\n    \n , \n    cast(null as STRING) as \n    \n    hazmat\n    \n , \n    cast(null as STRING) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as STRING) as \n    \n    hazmat_id\n    \n , \n    cast(null as STRING) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as FLOAT64) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as STRING) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as STRING) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as STRING) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as FLOAT64) as \n    \n    income_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    invt_count_classification\n    \n , \n    cast(null as FLOAT64) as \n    \n    invt_count_interval\n    \n , \n    cast(null as STRING) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as STRING) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as STRING) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as STRING) as \n    \n    is_moss\n    \n , \n    cast(null as STRING) as \n    \n    is_phantom\n    \n , \n    cast(null as STRING) as \n    \n    is_special_order_item\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    isonline\n    \n , \n    cast(null as STRING) as \n    \n    istaxable\n    \n , \n    cast(null as FLOAT64) as \n    \n    item_defined_cost\n    \n , \n    cast(null as STRING) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as FLOAT64) as \n    \n    item_image\n    \n , \n    cast(null as STRING) as \n    \n    item_revenue_category\n    \n , \n    cast(null as FLOAT64) as \n    \n    item_term_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as FLOAT64) as \n    \n    last_purchase_price\n    \n , \n    cast(null as FLOAT64) as \n    \n    location_id\n    \n , \n    cast(null as STRING) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as STRING) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as STRING) as \n    \n    manufacturer\n    \n , \n    cast(null as STRING) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as STRING) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as STRING) as \n    \n    matrix_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    maximum_quantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    minimum_quantity\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    modified\n    \n , \n    cast(null as STRING) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as FLOAT64) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as FLOAT64) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    ns_lead_time\n    \n , \n    cast(null as STRING) as \n    \n    offersupport\n    \n , \n    cast(null as STRING) as \n    \n    onspecial\n    \n , \n    cast(null as STRING) as \n    \n    overhead_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    parent_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    payment_method_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as STRING) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    pref_stock_level\n    \n , \n    cast(null as STRING) as \n    \n    prices_include_tax\n    \n , \n    cast(null as FLOAT64) as \n    \n    pricing_group_id\n    \n , \n    cast(null as STRING) as \n    \n    print_sub_items\n    \n , \n    cast(null as FLOAT64) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as STRING) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as STRING) as \n    \n    purchasedescription\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as FLOAT64) as \n    \n    quantityavailable\n    \n , \n    cast(null as FLOAT64) as \n    \n    quantitybackordered\n    \n , \n    cast(null as FLOAT64) as \n    \n    quantityonhand\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptamount\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as FLOAT64) as \n    \n    reorder_multiple\n    \n , \n    cast(null as FLOAT64) as \n    \n    reorderpoint\n    \n , \n    cast(null as STRING) as \n    \n    replenishment_method\n    \n , \n    cast(null as STRING) as \n    \n    resalable\n    \n , \n    cast(null as FLOAT64) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as FLOAT64) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as FLOAT64) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as STRING) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as STRING) as \n    \n    round_up_as_component\n    \n , \n    cast(null as FLOAT64) as \n    \n    safety_stock_days\n    \n , \n    cast(null as FLOAT64) as \n    \n    safety_stock_level\n    \n , \n    cast(null as FLOAT64) as \n    \n    sale_unit_id\n    \n , \n    cast(null as STRING) as \n    \n    salesdescription\n    \n , \n    cast(null as STRING) as \n    \n    salesforce_id\n    \n , \n    cast(null as STRING) as \n    \n    salesprice\n    \n , \n    cast(null as FLOAT64) as \n    \n    scrap_account_id\n    \n , \n    cast(null as STRING) as \n    \n    serialized_item\n    \n , \n    cast(null as FLOAT64) as \n    \n    shippingcost\n    \n , \n    cast(null as STRING) as \n    \n    special_work_order_item\n    \n , \n    cast(null as STRING) as \n    \n    specialsdescription\n    \n , \n    cast(null as FLOAT64) as \n    \n    stock_unit_id\n    \n , \n    cast(null as STRING) as \n    \n    storedescription\n    \n , \n    cast(null as STRING) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as STRING) as \n    \n    storedisplayname\n    \n , \n    cast(null as STRING) as \n    \n    subtype\n    \n , \n    cast(null as STRING) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as FLOAT64) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    supply_time_fence\n    \n , \n    cast(null as STRING) as \n    \n    supply_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    tax_item_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    totalvalue\n    \n , \n    cast(null as FLOAT64) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as FLOAT64) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as STRING) as \n    \n    udf1\n    \n , \n    cast(null as STRING) as \n    \n    udf2\n    \n , \n    cast(null as STRING) as \n    \n    un_number\n    \n , \n    cast(null as FLOAT64) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    units_type_id\n    \n , \n    cast(null as STRING) as \n    \n    upc_code\n    \n , \n    cast(null as STRING) as \n    \n    use_component_yield\n    \n , \n    cast(null as FLOAT64) as \n    \n    vendor_id\n    \n , \n    cast(null as STRING) as \n    \n    vendorname\n    \n , \n    cast(null as FLOAT64) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as STRING) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as STRING) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as STRING) as \n    \n    vsoe_discount\n    \n , \n    cast(null as FLOAT64) as \n    \n    vsoe_price\n    \n , \n    cast(null as FLOAT64) as \n    \n    weight\n    \n , \n    cast(null as FLOAT64) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as FLOAT64) as \n    \n    weight_unit_index\n    \n , \n    cast(null as FLOAT64) as \n    \n    wip_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__locations": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__locations", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__locations.sql", "original_file_path": "models/netsuite/stg_netsuite__locations.sql", "unique_id": "model.netsuite_source.stg_netsuite__locations", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__locations"], "alias": "stg_netsuite__locations", "checksum": {"name": "sha256", "checksum": "0e5129658fedf16df7b26cf25ad2351302ce70723e60b4b4b9d12a1e252c9254"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"location_id": {"name": "location_id", "description": "The unique identifier of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The location's name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The location's city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The location's country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2853608, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__locations`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__locations_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__locations_tmp')),\n                staging_columns=get_locations_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('locations_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__locations_tmp"], ["stg_netsuite__locations_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_locations_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__locations_tmp", "model.netsuite_source.stg_netsuite__locations_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__locations.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__locations_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__departments": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__departments", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__departments.sql", "original_file_path": "models/netsuite/stg_netsuite__departments.sql", "unique_id": "model.netsuite_source.stg_netsuite__departments", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__departments"], "alias": "stg_netsuite__departments", "checksum": {"name": "sha256", "checksum": "48851e18603bddeadb3b3992c83d3c779dada4b760fba2a2da68fe2bc9b431db"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all departments set up in Netsuite.", "columns": {"department_id": {"name": "department_id", "description": "The unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The department's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.280836, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__departments`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__departments_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__departments_tmp')),\n                staging_columns=get_departments_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('departments_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [["stg_netsuite__departments_tmp"], ["stg_netsuite__departments_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_departments_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__departments_tmp", "model.netsuite_source.stg_netsuite__departments_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__departments.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__departments_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__currencies": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__currencies", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__currencies.sql", "original_file_path": "models/netsuite/stg_netsuite__currencies.sql", "unique_id": "model.netsuite_source.stg_netsuite__currencies", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__currencies"], "alias": "stg_netsuite__currencies", "checksum": {"name": "sha256", "checksum": "64b53f34b5bf46bcf43e5753e5eb67143e96eaffad215604e424f4769791e793"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all currency information.", "columns": {"currency_id": {"name": "currency_id", "description": "The unique identifier of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "The currency's three letter symbol (ie. USD, EUR, CAD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.27777, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__currencies`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__currencies_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__currencies_tmp')),\n                staging_columns=get_currencies_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__currencies_tmp"], ["stg_netsuite__currencies_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_currencies_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__currencies_tmp", "model.netsuite_source.stg_netsuite__currencies_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__currencies.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__currencies_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    cast(null as STRING) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as FLOAT64) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__vendor_types": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__vendor_types", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__vendor_types.sql", "original_file_path": "models/netsuite/stg_netsuite__vendor_types.sql", "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__vendor_types"], "alias": "stg_netsuite__vendor_types", "checksum": {"name": "sha256", "checksum": "6d96a09d56ad4edb4011a0ce09eee13c465195ce03bec4902450ab57e9d2f74d"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A table detailing all the various types of vendors.", "columns": {"vendor_type_id": {"name": "vendor_type_id", "description": "The unique identifier of the vendor type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the vendor type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2919428, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendor_types`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__vendor_types_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__vendor_types_tmp')),\n                staging_columns=get_vendor_types_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__vendor_types_tmp"], ["stg_netsuite__vendor_types_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_vendor_types_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types_tmp", "model.netsuite_source.stg_netsuite__vendor_types_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__vendor_types.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendor_types_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as FLOAT64) as \n    \n    parent_id\n    \n , \n    cast(null as STRING) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounting_periods": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounting_periods", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/stg_netsuite__accounting_periods.sql", "original_file_path": "models/netsuite/stg_netsuite__accounting_periods.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounting_periods"], "alias": "stg_netsuite__accounting_periods", "checksum": {"name": "sha256", "checksum": "bd47f06946086147dacee032fd6ad9a36577fae371fa05c51336b3bac1c5f9cc"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"accounting_period_id": {"name": "accounting_period_id", "description": "The unique identifier of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_id": {"name": "year_id", "description": "The year id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "The quarter which the accounting period takes place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting_at": {"name": "starting_at", "description": "The timestamp indicating the start of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_at": {"name": "ending_at", "description": "The timestamp indicating the end of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_0": {"name": "year_0", "description": "Value indicating whether the accounting period is in it's initial year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Value indicating whether the accounting period is an adjustment (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Value indicating whether the accounting period is closed (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2721012, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounting_periods_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounting_periods_tmp')),\n                staging_columns=get_accounting_periods_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [["stg_netsuite__accounting_periods_tmp"], ["stg_netsuite__accounting_periods_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_source.get_accounting_periods_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp", "model.netsuite_source.stg_netsuite__accounting_periods_tmp"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounting_periods.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as STRING) as \n    \n    _fivetran_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as STRING) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as STRING) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as STRING) as \n    \n    closed_all\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    closed_on\n    \n , \n    cast(null as STRING) as \n    \n    closed_payroll\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as STRING) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as STRING) as \n    \n    isinactive\n    \n , \n    cast(null as STRING) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as STRING) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as STRING) as \n    \n    locked_all\n    \n , \n    cast(null as STRING) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as FLOAT64) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounting_periods_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounting_periods_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounting_periods_tmp"], "alias": "stg_netsuite__accounting_periods_tmp", "checksum": {"name": "sha256", "checksum": "af85ada4c304fe9e0c3fdaf8dca681113d692711ab665fa20a48bf20a3f53513"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.187268, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounting_periods') }}", "language": "sql", "refs": [], "sources": [["netsuite", "accounting_periods"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_periods_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounting_books_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounting_books_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounting_books_tmp"], "alias": "stg_netsuite__accounting_books_tmp", "checksum": {"name": "sha256", "checksum": "2a71eefcec7c5db5922ea1217879f5e7856b348418cd1698c81dd7ca78e95fbe"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.1909351, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_books_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounting_books') }}", "language": "sql", "refs": [], "sources": [["netsuite", "accounting_books"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounting_books"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_books_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__customers_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__customers_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__customers_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__customers_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__customers_tmp"], "alias": "stg_netsuite__customers_tmp", "checksum": {"name": "sha256", "checksum": "dd42aefc427f9f532fc0d79d50a1db8f9e6ea5f7038c43e2d8ea08ca6986fd2b"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.1945071, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__customers_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_customers') }}", "language": "sql", "refs": [], "sources": [["netsuite", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.customers"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__customers_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_customers_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__transaction_lines_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__transaction_lines_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__transaction_lines_tmp"], "alias": "stg_netsuite__transaction_lines_tmp", "checksum": {"name": "sha256", "checksum": "1e8e8e85dcbf177ac5a8539ed3ca4ab87c6b66bd8e98f8fac81bf8c92ecc4178"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.198111, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_transaction_lines') }}", "language": "sql", "refs": [], "sources": [["netsuite", "transaction_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transaction_lines_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__income_accounts_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__income_accounts_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__income_accounts_tmp"], "alias": "stg_netsuite__income_accounts_tmp", "checksum": {"name": "sha256", "checksum": "db2a368685ddd59347ffb164ea9204f378d33a39a4eebbffe35a22d59d387925"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.201826, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__income_accounts_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_income_accounts') }}", "language": "sql", "refs": [], "sources": [["netsuite", "income_accounts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.income_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_income_accounts_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__accounts_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__accounts_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounts_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounts_tmp"], "alias": "stg_netsuite__accounts_tmp", "checksum": {"name": "sha256", "checksum": "bb440ea013b9eb4fd2654be4f267bf3c08b4a4fbdb88e666c2721e79157bf54c"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2060218, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounts_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounts') }}", "language": "sql", "refs": [], "sources": [["netsuite", "accounts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounts_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounts_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__departments_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__departments_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__departments_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__departments_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__departments_tmp"], "alias": "stg_netsuite__departments_tmp", "checksum": {"name": "sha256", "checksum": "4d20b8f9c501e6642f4ed19fe0d6003244f3132bb8f127e6cd04749a2161a1d5"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2095969, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__departments_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_departments') }}", "language": "sql", "refs": [], "sources": [["netsuite", "departments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.departments"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__departments_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_departments_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__currencies_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__currencies_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__currencies_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__currencies_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__currencies_tmp"], "alias": "stg_netsuite__currencies_tmp", "checksum": {"name": "sha256", "checksum": "299203cc57a2fe306df440758d025485e593599f6390c02ce418cc17f6cbf085"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2131572, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__currencies_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_currencies') }}", "language": "sql", "refs": [], "sources": [["netsuite", "currencies"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.currencies"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__currencies_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_currencies_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__vendor_types_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__vendor_types_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__vendor_types_tmp"], "alias": "stg_netsuite__vendor_types_tmp", "checksum": {"name": "sha256", "checksum": "9418a3d15515e6876d45e9647eef973ee64e92a8ebd36de9ef48b4213362fbb8"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2167969, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendor_types_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_vendor_types') }}", "language": "sql", "refs": [], "sources": [["netsuite", "vendor_types"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.vendor_types"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendor_types_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__vendors_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__vendors_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__vendors_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__vendors_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__vendors_tmp"], "alias": "stg_netsuite__vendors_tmp", "checksum": {"name": "sha256", "checksum": "8e59bcb209c1fbcc2e4d3d45fbfa58520b4664fc1ca095cdc257b866d56bf48f"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.220319, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendors_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_vendors') }}", "language": "sql", "refs": [], "sources": [["netsuite", "vendors"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.vendors"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__vendors_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendors_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__locations_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__locations_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__locations_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__locations_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__locations_tmp"], "alias": "stg_netsuite__locations_tmp", "checksum": {"name": "sha256", "checksum": "ef49c17ad5f2ebc7ef36e8327bf47863dd5e5cae56eb79239babc1db36a64083"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2244768, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__locations_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_locations') }}", "language": "sql", "refs": [], "sources": [["netsuite", "locations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.locations"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__locations_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_locations_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__items_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__items_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__items_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__items_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__items_tmp"], "alias": "stg_netsuite__items_tmp", "checksum": {"name": "sha256", "checksum": "439132075eae5e14389f7542772d7ca936ea1489e7cdac59de46e8cb7173eb0a"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.228043, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__items_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_items') }}", "language": "sql", "refs": [], "sources": [["netsuite", "items"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.items"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__items_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_items_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__subsidiaries_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__subsidiaries_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__subsidiaries_tmp"], "alias": "stg_netsuite__subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "a6ac0f509e1ac21ecc3f89a4d5c0eed5c703a57e8fc4af43e01bdcf75ea2e679"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.2316759, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__subsidiaries_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_subsidiaries') }}", "language": "sql", "refs": [], "sources": [["netsuite", "subsidiaries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_subsidiaries_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__transactions_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__transactions_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__transactions_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__transactions_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__transactions_tmp"], "alias": "stg_netsuite__transactions_tmp", "checksum": {"name": "sha256", "checksum": "3784b104dd5b534cf77958a0db3b7a596311f53fe6cbc065385ded88577cfdd0"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.235532, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transactions_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_transactions') }}", "language": "sql", "refs": [], "sources": [["netsuite", "transactions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.transactions"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__transactions_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transactions_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__consolidated_exchange_rates_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__consolidated_exchange_rates_tmp"], "alias": "stg_netsuite__consolidated_exchange_rates_tmp", "checksum": {"name": "sha256", "checksum": "adef1eae799060e22040088aae3f36771a563821178b7986be7863221df9283e"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.239089, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__consolidated_exchange_rates_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_consolidated_exchange_rates') }}", "language": "sql", "refs": [], "sources": [["netsuite", "consolidated_exchange_rates"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.consolidated_exchange_rates"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_consolidated_exchange_rates_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__classes_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__classes_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__classes_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__classes_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__classes_tmp"], "alias": "stg_netsuite__classes_tmp", "checksum": {"name": "sha256", "checksum": "d0e5d095963df0342aa32dab6b3385cee09e2ee9a404972e692675a5e82c9fb0"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.242644, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__classes_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_classes') }}", "language": "sql", "refs": [], "sources": [["netsuite", "classes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.classes"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__classes_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_classes_data`", "extra_ctes_injected": true, "extra_ctes": []}, "model.netsuite_source.stg_netsuite__expense_accounts_tmp": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_netsuite_source", "name": "stg_netsuite__expense_accounts_tmp", "resource_type": "model", "package_name": "netsuite_source", "path": "netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__expense_accounts_tmp"], "alias": "stg_netsuite__expense_accounts_tmp", "checksum": {"name": "sha256", "checksum": "a47ced403e84ab6ca539aa177139c53e021b0c56d15dd9dfc83dcb0ebe7cd797"}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1676404470.246887, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__expense_accounts_tmp`", "raw_code": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_expense_accounts') }}", "language": "sql", "refs": [], "sources": [["netsuite", "expense_accounts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.expense_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_expense_accounts_data`", "extra_ctes_injected": true, "extra_ctes": []}, "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_books')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__accounting_books_accounting_book_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "fqn": ["netsuite_source", "unique_stg_netsuite__accounting_books_accounting_book_id"], "alias": "unique_stg_netsuite__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.2982268, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounting_books"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__accounting_books_accounting_book_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select accounting_book_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_books`\n  where accounting_book_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_books')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__accounting_books_accounting_book_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_books_accounting_book_id"], "alias": "not_null_stg_netsuite__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.299417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounting_books"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_books_accounting_book_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_books`\nwhere accounting_book_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__accounting_periods_accounting_period_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_periods_accounting_period_id"], "alias": "not_null_stg_netsuite__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3005, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_periods_accounting_period_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods`\nwhere accounting_period_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fiscal_calendar_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id"], "alias": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3014772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fiscal_calendar_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods`\nwhere fiscal_calendar_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fiscal_calendar_id", "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["accounting_period_id", "fiscal_calendar_id"], "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id", "resource_type": "test", "package_name": "netsuite_source", "path": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id"], "alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d"}, "created_at": 1676404470.3024588, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d\") }}", "language": "sql", "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounting_periods`\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__accounts_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__accounts_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "fqn": ["netsuite_source", "unique_stg_netsuite__accounts_account_id"], "alias": "unique_stg_netsuite__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.310196, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__accounts_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounts`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_netsuite__accounts"}, "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__accounts_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__accounts_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounts_account_id"], "alias": "not_null_stg_netsuite__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.311324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounts_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__accounts`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_netsuite__accounts"}, "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite__classes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__classes_class_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__classes_class_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "fqn": ["netsuite_source", "unique_stg_netsuite__classes_class_id"], "alias": "unique_stg_netsuite__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.312308, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__classes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__classes"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__classes_class_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select class_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__classes`\n  where class_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "class_id", "file_key_name": "models.stg_netsuite__classes"}, "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite__classes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__classes_class_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__classes_class_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "fqn": ["netsuite_source", "not_null_stg_netsuite__classes_class_id"], "alias": "not_null_stg_netsuite__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.313288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__classes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__classes"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__classes_class_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__classes`\nwhere class_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "class_id", "file_key_name": "models.stg_netsuite__classes"}, "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite__consolidated_exchange_rates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "fqn": ["netsuite_source", "unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id"], "alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee"}, "created_at": 1676404470.314254, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee\") }}", "language": "sql", "refs": [["stg_netsuite__consolidated_exchange_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select consolidated_exchange_rate_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__consolidated_exchange_rates`\n  where consolidated_exchange_rate_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite__consolidated_exchange_rates"}, "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite__consolidated_exchange_rates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "fqn": ["netsuite_source", "not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id"], "alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86"}, "created_at": 1676404470.315367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86\") }}", "language": "sql", "refs": [["stg_netsuite__consolidated_exchange_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__consolidated_exchange_rates`\nwhere consolidated_exchange_rate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite__consolidated_exchange_rates"}, "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite__currencies')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__currencies_currency_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "fqn": ["netsuite_source", "unique_stg_netsuite__currencies_currency_id"], "alias": "unique_stg_netsuite__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.316329, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__currencies"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__currencies"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__currencies_currency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select currency_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__currencies`\n  where currency_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_id", "file_key_name": "models.stg_netsuite__currencies"}, "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite__currencies')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__currencies_currency_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "fqn": ["netsuite_source", "not_null_stg_netsuite__currencies_currency_id"], "alias": "not_null_stg_netsuite__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.317287, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__currencies"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__currencies"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__currencies_currency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__currencies`\nwhere currency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_id", "file_key_name": "models.stg_netsuite__currencies"}, "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite__customers')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__customers_customer_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__customers_customer_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "fqn": ["netsuite_source", "unique_stg_netsuite__customers_customer_id"], "alias": "unique_stg_netsuite__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.318242, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__customers"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer_id", "file_key_name": "models.stg_netsuite__customers"}, "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite__customers')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__customers_customer_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__customers_customer_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "fqn": ["netsuite_source", "not_null_stg_netsuite__customers_customer_id"], "alias": "not_null_stg_netsuite__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.319343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__customers"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer_id", "file_key_name": "models.stg_netsuite__customers"}, "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite__departments')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__departments_department_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__departments_department_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "fqn": ["netsuite_source", "unique_stg_netsuite__departments_department_id"], "alias": "unique_stg_netsuite__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.320308, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__departments"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__departments"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__departments_department_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select department_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__departments`\n  where department_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "department_id", "file_key_name": "models.stg_netsuite__departments"}, "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite__departments')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__departments_department_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__departments_department_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "fqn": ["netsuite_source", "not_null_stg_netsuite__departments_department_id"], "alias": "not_null_stg_netsuite__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.32127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__departments"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__departments"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__departments_department_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__departments`\nwhere department_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "department_id", "file_key_name": "models.stg_netsuite__departments"}, "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "expense_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__expense_accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__expense_accounts_expense_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__expense_accounts_expense_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "fqn": ["netsuite_source", "unique_stg_netsuite__expense_accounts_expense_account_id"], "alias": "unique_stg_netsuite__expense_accounts_expense_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.322222, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__expense_accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__expense_accounts_expense_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select expense_account_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__expense_accounts`\n  where expense_account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "expense_account_id", "file_key_name": "models.stg_netsuite__expense_accounts"}, "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "expense_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__expense_accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__expense_accounts_expense_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__expense_accounts_expense_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "fqn": ["netsuite_source", "not_null_stg_netsuite__expense_accounts_expense_account_id"], "alias": "not_null_stg_netsuite__expense_accounts_expense_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.323528, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__expense_accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__expense_accounts_expense_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expense_account_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__expense_accounts`\nwhere expense_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "expense_account_id", "file_key_name": "models.stg_netsuite__expense_accounts"}, "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "income_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__income_accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__income_accounts_income_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__income_accounts_income_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "fqn": ["netsuite_source", "unique_stg_netsuite__income_accounts_income_account_id"], "alias": "unique_stg_netsuite__income_accounts_income_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.32449, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__income_accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__income_accounts_income_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select income_account_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__income_accounts`\n  where income_account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "income_account_id", "file_key_name": "models.stg_netsuite__income_accounts"}, "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "income_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__income_accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__income_accounts_income_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__income_accounts_income_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "fqn": ["netsuite_source", "not_null_stg_netsuite__income_accounts_income_account_id"], "alias": "not_null_stg_netsuite__income_accounts_income_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3254368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__income_accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__income_accounts_income_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_account_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__income_accounts`\nwhere income_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "income_account_id", "file_key_name": "models.stg_netsuite__income_accounts"}, "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite__items')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__items_item_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__items_item_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "fqn": ["netsuite_source", "unique_stg_netsuite__items_item_id"], "alias": "unique_stg_netsuite__items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.32639, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__items"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__items"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__items`\n  where item_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "item_id", "file_key_name": "models.stg_netsuite__items"}, "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite__items')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__items_item_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__items_item_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "fqn": ["netsuite_source", "not_null_stg_netsuite__items_item_id"], "alias": "not_null_stg_netsuite__items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3274891, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__items"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__items"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__items`\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "item_id", "file_key_name": "models.stg_netsuite__items"}, "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite__locations')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__locations_location_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__locations_location_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "fqn": ["netsuite_source", "unique_stg_netsuite__locations_location_id"], "alias": "unique_stg_netsuite__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.328537, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__locations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__locations"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select location_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__locations`\n  where location_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location_id", "file_key_name": "models.stg_netsuite__locations"}, "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite__locations')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__locations_location_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__locations_location_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "fqn": ["netsuite_source", "not_null_stg_netsuite__locations_location_id"], "alias": "not_null_stg_netsuite__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.32956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__locations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__locations"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__locations`\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location_id", "file_key_name": "models.stg_netsuite__locations"}, "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite__subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__subsidiaries_subsidiary_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "fqn": ["netsuite_source", "unique_stg_netsuite__subsidiaries_subsidiary_id"], "alias": "unique_stg_netsuite__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.330561, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__subsidiaries_subsidiary_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select subsidiary_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__subsidiaries`\n  where subsidiary_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite__subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__subsidiaries_subsidiary_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "fqn": ["netsuite_source", "not_null_stg_netsuite__subsidiaries_subsidiary_id"], "alias": "not_null_stg_netsuite__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.331696, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__subsidiaries_subsidiary_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__subsidiaries`\nwhere subsidiary_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__transaction_lines_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__transaction_lines_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "fqn": ["netsuite_source", "not_null_stg_netsuite__transaction_lines_transaction_id"], "alias": "not_null_stg_netsuite__transaction_lines_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.332756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transaction_lines_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__transaction_lines_transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__transaction_lines_transaction_line_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "fqn": ["netsuite_source", "not_null_stg_netsuite__transaction_lines_transaction_line_id"], "alias": "not_null_stg_netsuite__transaction_lines_transaction_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3337731, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transaction_lines_transaction_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines`\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id"], "alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad"}, "created_at": 1676404470.334751, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad\") }}", "language": "sql", "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transaction_lines`\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transactions')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__transactions_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "fqn": ["netsuite_source", "unique_stg_netsuite__transactions_transaction_id"], "alias": "unique_stg_netsuite__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.337738, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transactions"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__transactions_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select transaction_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transactions`\n  where transaction_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transactions"}, "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transactions')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__transactions_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "fqn": ["netsuite_source", "not_null_stg_netsuite__transactions_transaction_id"], "alias": "not_null_stg_netsuite__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.338725, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transactions"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transactions_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__transactions`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transactions"}, "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendor_types')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__vendor_types_vendor_type_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__vendor_types_vendor_type_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "fqn": ["netsuite_source", "unique_stg_netsuite__vendor_types_vendor_type_id"], "alias": "unique_stg_netsuite__vendor_types_vendor_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.339827, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__vendor_types"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__vendor_types_vendor_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select vendor_type_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendor_types`\n  where vendor_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_type_id", "file_key_name": "models.stg_netsuite__vendor_types"}, "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendor_types')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__vendor_types_vendor_type_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__vendor_types_vendor_type_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "fqn": ["netsuite_source", "not_null_stg_netsuite__vendor_types_vendor_type_id"], "alias": "not_null_stg_netsuite__vendor_types_vendor_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.340791, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__vendor_types"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__vendor_types_vendor_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_type_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendor_types`\nwhere vendor_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_type_id", "file_key_name": "models.stg_netsuite__vendor_types"}, "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendors')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite__vendors_vendor_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "fqn": ["netsuite_source", "unique_stg_netsuite__vendors_vendor_id"], "alias": "unique_stg_netsuite__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.341749, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__vendors"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendors"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__vendors_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select vendor_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendors`\n  where vendor_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_netsuite__vendors"}, "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendors')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite__vendors_vendor_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "fqn": ["netsuite_source", "not_null_stg_netsuite__vendors_vendor_id"], "alias": "not_null_stg_netsuite__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.34271, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite__vendors"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendors"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__vendors_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite__vendors`\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_netsuite__vendors"}, "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__account_types')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__account_types_account_type_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__account_types_account_type_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "fqn": ["netsuite_source", "unique_stg_netsuite2__account_types_account_type_id"], "alias": "unique_stg_netsuite2__account_types_account_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3873641, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__account_types"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__account_types_account_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_type_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__account_types`\n  where account_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_type_id", "file_key_name": "models.stg_netsuite2__account_types"}, "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__account_types')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__account_types_account_type_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__account_types_account_type_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "fqn": ["netsuite_source", "not_null_stg_netsuite2__account_types_account_type_id"], "alias": "not_null_stg_netsuite2__account_types_account_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.388445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__account_types"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__account_types_account_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__account_types`\nwhere account_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_type_id", "file_key_name": "models.stg_netsuite2__account_types"}, "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_book_subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id"], "alias": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.389431, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_book_subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select _fivetran_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_book_subsidiaries`\n  where _fivetran_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_book_subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_book_subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id"], "alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127"}, "created_at": 1676404470.390541, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127\") }}", "language": "sql", "refs": [["stg_netsuite2__accounting_book_subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_book_subsidiaries`\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_book_subsidiaries"}, "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_books')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__accounting_books_accounting_book_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_books_accounting_book_id"], "alias": "unique_stg_netsuite2__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.39153, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_books"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_books_accounting_book_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select accounting_book_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_books`\n  where accounting_book_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite2__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_books')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__accounting_books_accounting_book_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_books_accounting_book_id"], "alias": "not_null_stg_netsuite2__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.392492, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_books"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounting_books_accounting_book_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_books`\nwhere accounting_book_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite2__accounting_books"}, "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_period_fiscal_cal')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id"], "alias": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3934479, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_period_fiscal_cal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select _fivetran_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_period_fiscal_cal`\n  where _fivetran_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_period_fiscal_cal"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_period_fiscal_cal')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id"], "alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415"}, "created_at": 1676404470.394536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415\") }}", "language": "sql", "refs": [["stg_netsuite2__accounting_period_fiscal_cal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_period_fiscal_cal`\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_period_fiscal_cal"}, "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_periods')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__accounting_periods_accounting_period_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_periods_accounting_period_id"], "alias": "unique_stg_netsuite2__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.395499, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_periods"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_periods_accounting_period_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select accounting_period_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_periods`\n  where accounting_period_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite2__accounting_periods"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_periods')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__accounting_periods_accounting_period_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_periods_accounting_period_id"], "alias": "not_null_stg_netsuite2__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.396449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounting_periods"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounting_periods_accounting_period_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounting_periods`\nwhere accounting_period_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite2__accounting_periods"}, "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__accounts_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__accounts_account_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounts_account_id"], "alias": "unique_stg_netsuite2__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.397409, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounts_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounts`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_netsuite2__accounts"}, "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__accounts_account_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__accounts_account_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounts_account_id"], "alias": "not_null_stg_netsuite2__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3986292, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__accounts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounts_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__accounts`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_netsuite2__accounts"}, "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__classes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__classes_class_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__classes_class_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "fqn": ["netsuite_source", "unique_stg_netsuite2__classes_class_id"], "alias": "unique_stg_netsuite2__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.3995829, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__classes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__classes"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__classes_class_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select class_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__classes`\n  where class_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "class_id", "file_key_name": "models.stg_netsuite2__classes"}, "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__classes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__classes_class_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__classes_class_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "fqn": ["netsuite_source", "not_null_stg_netsuite2__classes_class_id"], "alias": "not_null_stg_netsuite2__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.400536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__classes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__classes"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__classes_class_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__classes`\nwhere class_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "class_id", "file_key_name": "models.stg_netsuite2__classes"}, "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__consolidated_exchange_rates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "fqn": ["netsuite_source", "unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id"], "alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1"}, "created_at": 1676404470.4014971, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1\") }}", "language": "sql", "refs": [["stg_netsuite2__consolidated_exchange_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select consolidated_exchange_rate_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__consolidated_exchange_rates`\n  where consolidated_exchange_rate_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite2__consolidated_exchange_rates"}, "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__consolidated_exchange_rates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "fqn": ["netsuite_source", "not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id"], "alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511"}, "created_at": 1676404470.402592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511\") }}", "language": "sql", "refs": [["stg_netsuite2__consolidated_exchange_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__consolidated_exchange_rates`\nwhere consolidated_exchange_rate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite2__consolidated_exchange_rates"}, "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__currencies')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__currencies_currency_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "fqn": ["netsuite_source", "unique_stg_netsuite2__currencies_currency_id"], "alias": "unique_stg_netsuite2__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4035509, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__currencies"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__currencies_currency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select currency_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__currencies`\n  where currency_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_id", "file_key_name": "models.stg_netsuite2__currencies"}, "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__currencies')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__currencies_currency_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "fqn": ["netsuite_source", "not_null_stg_netsuite2__currencies_currency_id"], "alias": "not_null_stg_netsuite2__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4045088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__currencies"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__currencies_currency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__currencies`\nwhere currency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_id", "file_key_name": "models.stg_netsuite2__currencies"}, "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__customers')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__customers_customer_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__customers_customer_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "fqn": ["netsuite_source", "unique_stg_netsuite2__customers_customer_id"], "alias": "unique_stg_netsuite2__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.405461, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__customers"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer_id", "file_key_name": "models.stg_netsuite2__customers"}, "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__customers')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__customers_customer_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__customers_customer_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "fqn": ["netsuite_source", "not_null_stg_netsuite2__customers_customer_id"], "alias": "not_null_stg_netsuite2__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.40656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__customers"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer_id", "file_key_name": "models.stg_netsuite2__customers"}, "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__departments')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__departments_department_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__departments_department_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "fqn": ["netsuite_source", "unique_stg_netsuite2__departments_department_id"], "alias": "unique_stg_netsuite2__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.407508, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__departments"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__departments"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__departments_department_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select department_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__departments`\n  where department_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "department_id", "file_key_name": "models.stg_netsuite2__departments"}, "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__departments')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__departments_department_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__departments_department_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "fqn": ["netsuite_source", "not_null_stg_netsuite2__departments_department_id"], "alias": "not_null_stg_netsuite2__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4084601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__departments"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__departments"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__departments_department_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__departments`\nwhere department_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "department_id", "file_key_name": "models.stg_netsuite2__departments"}, "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "entity_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__entities')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__entities_entity_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__entities_entity_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "fqn": ["netsuite_source", "unique_stg_netsuite2__entities_entity_id"], "alias": "unique_stg_netsuite2__entities_entity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.409406, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__entities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__entities"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__entities_entity_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select entity_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entities`\n  where entity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "entity_id", "file_key_name": "models.stg_netsuite2__entities"}, "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "entity_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__entities')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__entities_entity_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__entities_entity_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "fqn": ["netsuite_source", "not_null_stg_netsuite2__entities_entity_id"], "alias": "not_null_stg_netsuite2__entities_entity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4104939, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__entities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__entities"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__entities_entity_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__entities`\nwhere entity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "entity_id", "file_key_name": "models.stg_netsuite2__entities"}, "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__items')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__items_item_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__items_item_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "fqn": ["netsuite_source", "unique_stg_netsuite2__items_item_id"], "alias": "unique_stg_netsuite2__items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4114418, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__items"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__items"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__items`\n  where item_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "item_id", "file_key_name": "models.stg_netsuite2__items"}, "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__items')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__items_item_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__items_item_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "fqn": ["netsuite_source", "not_null_stg_netsuite2__items_item_id"], "alias": "not_null_stg_netsuite2__items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.412391, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__items"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__items"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__items`\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "item_id", "file_key_name": "models.stg_netsuite2__items"}, "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__jobs')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__jobs_job_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__jobs_job_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "fqn": ["netsuite_source", "unique_stg_netsuite2__jobs_job_id"], "alias": "unique_stg_netsuite2__jobs_job_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.413341, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__jobs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__jobs_job_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select job_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__jobs`\n  where job_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "job_id", "file_key_name": "models.stg_netsuite2__jobs"}, "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__jobs')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__jobs_job_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__jobs_job_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "fqn": ["netsuite_source", "not_null_stg_netsuite2__jobs_job_id"], "alias": "not_null_stg_netsuite2__jobs_job_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.414429, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__jobs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__jobs_job_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__jobs`\nwhere job_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "job_id", "file_key_name": "models.stg_netsuite2__jobs"}, "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__locations')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__locations_location_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__locations_location_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "fqn": ["netsuite_source", "unique_stg_netsuite2__locations_location_id"], "alias": "unique_stg_netsuite2__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.415375, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__locations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__locations"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select location_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__locations`\n  where location_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location_id", "file_key_name": "models.stg_netsuite2__locations"}, "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__locations')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__locations_location_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__locations_location_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "fqn": ["netsuite_source", "not_null_stg_netsuite2__locations_location_id"], "alias": "not_null_stg_netsuite2__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.416321, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__locations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__locations"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__locations`\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location_id", "file_key_name": "models.stg_netsuite2__locations"}, "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__subsidiaries_subsidiary_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "fqn": ["netsuite_source", "unique_stg_netsuite2__subsidiaries_subsidiary_id"], "alias": "unique_stg_netsuite2__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.41727, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__subsidiaries_subsidiary_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select subsidiary_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__subsidiaries`\n  where subsidiary_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite2__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__subsidiaries')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__subsidiaries_subsidiary_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "fqn": ["netsuite_source", "not_null_stg_netsuite2__subsidiaries_subsidiary_id"], "alias": "not_null_stg_netsuite2__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.418368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__subsidiaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__subsidiaries_subsidiary_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__subsidiaries`\nwhere subsidiary_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite2__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__transaction_accounting_lines_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_accounting_lines_transaction_id"], "alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc"}, "created_at": 1676404470.419323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc\") }}", "language": "sql", "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id"], "alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54"}, "created_at": 1676404470.420285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54\") }}", "language": "sql", "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines`\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id"], "alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6"}, "created_at": 1676404470.4212532, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6\") }}", "language": "sql", "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_accounting_lines`\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__transaction_lines_transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__transaction_lines_transaction_line_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_lines_transaction_line_id"], "alias": "not_null_stg_netsuite2__transaction_lines_transaction_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.424106, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transaction_lines_transaction_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines`\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__transaction_lines_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__transaction_lines_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_lines_transaction_id"], "alias": "not_null_stg_netsuite2__transaction_lines_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.425069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transaction_lines_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id", "resource_type": "test", "package_name": "netsuite_source", "path": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id"], "alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145"}, "created_at": 1676404470.426176, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145\") }}", "language": "sql", "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transaction_lines`\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transactions')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__transactions_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "fqn": ["netsuite_source", "unique_stg_netsuite2__transactions_transaction_id"], "alias": "unique_stg_netsuite2__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.428884, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__transactions_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select transaction_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transactions`\n  where transaction_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transactions"}, "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transactions')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__transactions_transaction_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transactions_transaction_id"], "alias": "not_null_stg_netsuite2__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4298549, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transactions_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__transactions`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transactions"}, "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_category_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendor_categories')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__vendor_categories_vendor_category_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__vendor_categories_vendor_category_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "fqn": ["netsuite_source", "unique_stg_netsuite2__vendor_categories_vendor_category_id"], "alias": "unique_stg_netsuite2__vendor_categories_vendor_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.4308329, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__vendor_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__vendor_categories_vendor_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select vendor_category_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendor_categories`\n  where vendor_category_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_category_id", "file_key_name": "models.stg_netsuite2__vendor_categories"}, "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_category_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendor_categories')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__vendor_categories_vendor_category_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__vendor_categories_vendor_category_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "fqn": ["netsuite_source", "not_null_stg_netsuite2__vendor_categories_vendor_category_id"], "alias": "not_null_stg_netsuite2__vendor_categories_vendor_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.431839, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__vendor_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__vendor_categories_vendor_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_category_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendor_categories`\nwhere vendor_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_category_id", "file_key_name": "models.stg_netsuite2__vendor_categories"}, "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendors')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "unique_stg_netsuite2__vendors_vendor_id", "resource_type": "test", "package_name": "netsuite_source", "path": "unique_stg_netsuite2__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "fqn": ["netsuite_source", "unique_stg_netsuite2__vendors_vendor_id"], "alias": "unique_stg_netsuite2__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.433014, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__vendors"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__vendors_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select vendor_id as unique_field\n  from `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendors`\n  where vendor_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_netsuite2__vendors"}, "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendors')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1_dbt_test__audit", "name": "not_null_stg_netsuite2__vendors_vendor_id", "resource_type": "test", "package_name": "netsuite_source", "path": "not_null_stg_netsuite2__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite2.yml", "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "fqn": ["netsuite_source", "not_null_stg_netsuite2__vendors_vendor_id"], "alias": "not_null_stg_netsuite2__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676404470.433974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_netsuite2__vendors"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors"]}, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__vendors_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom `dbt-package-testing`.`netsuite_source_integration_tests_1_netsuite_source`.`stg_netsuite2__vendors`\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_netsuite2__vendors"}}, "sources": {"source.netsuite_source.netsuite2.account_type": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "account_type", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.account_type", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "account_type"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_account_type_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the various account types within Netsuite.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of thea account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balancesheet": {"name": "balancesheet", "description": "Boolean indicating if the account type is a balance sheet account. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "left": {"name": "left", "description": "Boolean indicating if the account type is leftside. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longname": {"name": "longname", "description": "The name of the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_type_data`", "created_at": 1676404470.516481}, "source.netsuite_source.netsuite2.accounting_book_subsidiaries": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_book_subsidiaries", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.accounting_book_subsidiaries", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_book_subsidiaries"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_book_sub_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the various account books and the respective subsidiaries.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingbook": {"name": "accountingbook", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the accounting book subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_sub_data`", "created_at": 1676404470.5166311}, "source.netsuite_source.netsuite2.accounting_book": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_book", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.accounting_book", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_book"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_book_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basebook": {"name": "basebook", "description": "Reference to the base book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveperiod": {"name": "effectiveperiod", "description": "Reference to the effective period of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isadjustmentonly": {"name": "isadjustmentonly", "description": "Boolean indicating if the accounting book is an adjustment only. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isconsolidated": {"name": "isconsolidated", "description": "Boolean indicating if the accounting book is a consolidated entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contingentrevenuehandling": {"name": "contingentrevenuehandling", "description": "Boolean indicating if the accounting book is contingent revenue handling. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isprimary": {"name": "isprimary", "description": "Boolean indicating if the accounting book is a primary entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "twosteprevenueallocation": {"name": "twosteprevenueallocation", "description": "Boolean indicating if the accounting book is a two step revenue allocation entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unbilledreceivablegrouping": {"name": "unbilledreceivablegrouping", "description": "Boolean indicating if the accounting book is an unbilled receivable grouping. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_book_data`", "created_at": 1676404470.51676}, "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_period_fiscal_calendars", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_period_fiscal_calendars"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_period_fiscal_cal_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the accounting fiscal calendar periods.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingperiod": {"name": "accountingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscalcalendar": {"name": "fiscalcalendar", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent fiscal calendar accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_fiscal_cal_data`", "created_at": 1676404470.5168781}, "source.netsuite_source.netsuite2.accounting_period": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_period", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.accounting_period", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_period"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_period_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "periodname": {"name": "periodname", "description": "Name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startdate": {"name": "startdate", "description": "Timestamp of when the accounting period starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enddate": {"name": "enddate", "description": "Timestamp if when the accounting period ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedondate": {"name": "closedondate", "description": "Timestamp of when the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isquarter": {"name": "isquarter", "description": "Boolean indicating if the accounting period is the initial quarter. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isyear": {"name": "isyear", "description": "Boolean indicating if the accounting period is the initial period. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isadjust": {"name": "isadjust", "description": "Boolean indicating if the accounting period is an adjustment. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isposting": {"name": "isposting", "description": "Boolean indicating if the accounting period is posting. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed": {"name": "closed", "description": "Boolean indicating if the accounting period is closed. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alllocked": {"name": "alllocked", "description": "Boolean indicating if all the accounting periods are locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arlocked": {"name": "arlocked", "description": "Boolean indicating if the ar accounting period is locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "aplocked": {"name": "aplocked", "description": "Boolean indicating if the ap accounting period is locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_accounting_period_data`", "created_at": 1676404470.517}, "source.netsuite_source.netsuite2.account": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "account", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.account", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "account"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_account_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounts set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the external account,", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acctnumber": {"name": "acctnumber", "description": "Netsuite generated account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accttype": {"name": "accttype", "description": "Reference to the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferralacct": {"name": "deferralacct", "description": "Reference to the deferral account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cashflowrate": {"name": "cashflowrate", "description": "The cash flow rate type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generalrate": {"name": "generalrate", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includechildren": {"name": "includechildren", "description": "Boolean indicating if the account includes sub accounts. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the account is inactive. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issummary": {"name": "issummary", "description": "Boolean indicating if the account is a summary account. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_account_data`", "created_at": 1676404470.517128}, "source.netsuite_source.netsuite2.classification": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "classification", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.classification", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "classification"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_classification_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all classes set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the external class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the class is active. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_classification_data`", "created_at": 1676404470.5172422}, "source.netsuite_source.netsuite2.consolidated_exchange_rate": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "consolidated_exchange_rate", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.consolidated_exchange_rate", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "consolidated_exchange_rate"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_consolidated_exchange_rate_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"id": {"name": "id", "description": "unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postingperiod": {"name": "postingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fromcurrency": {"name": "fromcurrency", "description": "The currency id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fromsubsidiary": {"name": "fromsubsidiary", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tocurrency": {"name": "tocurrency", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tosubsidiary": {"name": "tosubsidiary", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currentrate": {"name": "currentrate", "description": "The current rate associated with the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "averagerate": {"name": "averagerate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historicalrate": {"name": "historicalrate", "description": "The historical rate of the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_consolidated_exchange_rate_data`", "created_at": 1676404470.517353}, "source.netsuite_source.netsuite2.currency": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "currency", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.currency", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "currency"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_currency_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all currency information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "Currency symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_currency_data`", "created_at": 1676404470.517459}, "source.netsuite_source.netsuite2.customer": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "customer", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.customer", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "customer"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_customer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all customer information.", "columns": {"id": {"name": "id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entityid": {"name": "entityid", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the associated external customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isperson": {"name": "isperson", "description": "Boolean indicating if the customer is an individual person. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstname": {"name": "firstname", "description": "First name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastname": {"name": "lastname", "description": "Last name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Customers email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultbillingaddress": {"name": "defaultbillingaddress", "description": "Reference to the associated billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultshippingaddress": {"name": "defaultshippingaddress", "description": "Reference to the associated default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivablesaccount": {"name": "receivablesaccount", "description": "Reference to the associated receivables account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstorderdate": {"name": "firstorderdate", "description": "Timestamp of when the first order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_customer_data`", "created_at": 1676404470.517579}, "source.netsuite_source.netsuite2.department": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "department", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.department", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "department"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_department_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all departments set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the department is active. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_department_data`", "created_at": 1676404470.517733}, "source.netsuite_source.netsuite2.entity": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "entity", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.entity", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "entity"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_entities_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all entities in Netsuite.", "columns": {"id": {"name": "id", "description": "Th \"The entity id of the entity used for the record.\"e unique identifier of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact": {"name": "contact", "description": "The unique identifier of the contact associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "The unique identifier of the customer associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee": {"name": "employee", "description": "The unique identifier of the employee associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entitytitle": {"name": "entitytitle", "description": "The entity name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isperson": {"name": "isperson", "description": "Value indicating whether the entity is a person (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "The unique identifier of the parent entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "The unique identifier of the project (job) associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The entity type (Contact, CustJob, Job, etc).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The unique identifier of the vendor associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entities_data`", "created_at": 1676404470.517848}, "source.netsuite_source.netsuite2.entity_address": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "entity_address", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.entity_address", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "entity_address"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_entity_address_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing addresses and the various entities which they map.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addrtext": {"name": "addrtext", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_entity_address_data`", "created_at": 1676404470.517961}, "source.netsuite_source.netsuite2.item": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "item", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.item", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "item"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing information about the items created in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "itemtype": {"name": "itemtype", "description": "Item type name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Sales description associated with the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assetaccount": {"name": "assetaccount", "description": "Reference to the asset account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expenseaccount": {"name": "expenseaccount", "description": "Reference to the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gainlossaccount": {"name": "gainlossaccount", "description": "Reference to the gain or loss account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "incomeaccount": {"name": "incomeaccount", "description": "Reference to the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoexpenseaccount": {"name": "intercoexpenseaccount", "description": "Reference to the intercompany expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoincomeaccount": {"name": "intercoincomeaccount", "description": "Reference to the intercompany income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferralaccount": {"name": "deferralaccount", "description": "Reference to the deferred expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferredrevenueaccount": {"name": "deferredrevenueaccount", "description": "Reference to the deferred revenue account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_item_data`", "created_at": 1676404470.518084}, "source.netsuite_source.netsuite2.job": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "job", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.job", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "job"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_job_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all jobs.", "columns": {"id": {"name": "id", "description": "The unique identifier of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "The unique identifier of the external job reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "The unique identifier of the customer associated with the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entityid": {"name": "entityid", "description": "Reference the the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultbillingaddress": {"name": "defaultbillingaddress", "description": "Default billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultshippingaddress": {"name": "defaultshippingaddress", "description": "Default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent job.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_job_data`", "created_at": 1676404470.518195}, "source.netsuite_source.netsuite2.location_main_address": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "location_main_address", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.location_main_address", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "location_main_address"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_location_main_address_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the location main addresses.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addrtext": {"name": "addrtext", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_main_address_data`", "created_at": 1676404470.5183098}, "source.netsuite_source.netsuite2.location": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "location", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.location", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "location"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_location_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainaddress": {"name": "mainaddress", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_location_data`", "created_at": 1676404470.51842}, "source.netsuite_source.netsuite2.subsidiary": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "subsidiary", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.subsidiary", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "subsidiary"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_subsidiary_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all subsidiaries.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainaddress": {"name": "mainaddress", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscalcalendar": {"name": "fiscalcalendar", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_subsidiary_data`", "created_at": 1676404470.5185359}, "source.netsuite_source.netsuite2.transaction_accounting_line": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "transaction_accounting_line", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.transaction_accounting_line", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction_accounting_line"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_tran_acct_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction": {"name": "transaction", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactionline": {"name": "transactionline", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "netamount": {"name": "netamount", "description": "The net amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingbook": {"name": "accountingbook", "description": "Reference to the accounting book of the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account": {"name": "account", "description": "Reference to the account associated with the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting": {"name": "posting", "description": "Boolean indicating if the entry is posting. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Amount associated as a credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit": {"name": "debit", "description": "Amount associated as a debit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amountpaid": {"name": "amountpaid", "description": "Total amount paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amountunpaid": {"name": "amountunpaid", "description": "Total amount unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_tran_acct_line_data`", "created_at": 1676404470.5186481}, "source.netsuite_source.netsuite2.transaction_line": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "transaction_line", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.transaction_line", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction_line"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_transaction_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction": {"name": "transaction", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linesequencenumber": {"name": "linesequencenumber", "description": "Netsuite generated number associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity": {"name": "entity", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item": {"name": "item", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isclosed": {"name": "isclosed", "description": "Boolean indicating if the transaction line is closed. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isbillable": {"name": "isbillable", "description": "Boolean indicating if the transaction line is billable. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iscogs": {"name": "iscogs", "description": "Boolean indicating if the transaction line is a cost of goods sold entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cleared": {"name": "cleared", "description": "Boolean indicating if the transaction line is cleared. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commitmentfirm": {"name": "commitmentfirm", "description": "Boolean indicating if the transaction line is a commitment firm. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainline": {"name": "mainline", "description": "Boolean indicating if the transaction line is a main line entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxline": {"name": "taxline", "description": "Boolean indicating if the transaction line is a tax line. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_line_data`", "created_at": 1676404470.518773}, "source.netsuite_source.netsuite2.transaction": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "transaction", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.transaction", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_transaction_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactionnumber": {"name": "transactionnumber", "description": "The Netsuite generated number of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Memo attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trandate": {"name": "trandate", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createddate": {"name": "createddate", "description": "Timestamp of when the record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duedate": {"name": "duedate", "description": "Timestamp of the transactions due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedate": {"name": "closedate", "description": "Timestamp of when the transaction was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity": {"name": "entity", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postingperiod": {"name": "postingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting": {"name": "posting", "description": "Boolean indicating if the transaction is a posting event. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoadj": {"name": "intercoadj", "description": "Boolean indicating if the transaction is an intercompany adjustment. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isreversal": {"name": "isreversal", "description": "Boolean indicating if the transaction is a reversal entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_transaction_data`", "created_at": 1676404470.518892}, "source.netsuite_source.netsuite2.vendor_category": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "vendor_category", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.vendor_category", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "vendor_category"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_vendor_category_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing categories and how they map to vendors.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_category_data`", "created_at": 1676404470.5190332}, "source.netsuite_source.netsuite2.vendor": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "vendor", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "unique_id": "source.netsuite_source.netsuite2.vendor", "fqn": ["netsuite_source", "netsuite2", "netsuite2", "vendor"], "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_vendor_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all vendor information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "datecreated": {"name": "datecreated", "description": "Timestamp of the record creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite2_vendor_data`", "created_at": 1676404470.519148}, "source.netsuite_source.netsuite.accounting_books": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_books", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.accounting_books", "fqn": ["netsuite_source", "netsuite", "netsuite", "accounting_books"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounting_books_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating whether it is a primary accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_books_data`", "created_at": 1676404470.519254}, "source.netsuite_source.netsuite.accounting_periods": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounting_periods", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.accounting_periods", "fqn": ["netsuite_source", "netsuite", "netsuite", "accounting_periods"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounting_periods_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"accounting_period_id": {"name": "accounting_period_id", "description": "The unique identifier of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_id": {"name": "year_id", "description": "The year id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "The quarter which the accounting period takes place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting": {"name": "starting", "description": "The timestamp indicating the start of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending": {"name": "ending", "description": "The timestamp indicating the end of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_0": {"name": "year_0", "description": "Value indicating whether the accounting period is in it's initial year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Value indicating whether the accounting period is an adjustment (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed": {"name": "closed", "description": "Value indicating whether the accounting period is closed (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounting_periods_data`", "created_at": 1676404470.519369}, "source.netsuite_source.netsuite.accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "accounts", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.accounts", "fqn": ["netsuite_source", "netsuite", "netsuite", "accounts"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounts_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table that provides a complete listing of every account in the accounting system.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The accounts associated parent account id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the type of the account (ie. Bank, Equity, Income, Expense).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingnumber": {"name": "accountingnumber", "description": "The account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Value indicating whether the account is on the leftside (debit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Value indicating whether the account is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_accounts_data`", "created_at": 1676404470.519485}, "source.netsuite_source.netsuite.classes": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "classes", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.classes", "fqn": ["netsuite_source", "netsuite", "netsuite", "classes"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_classes_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all classes set up in Netsuite.", "columns": {"class_id": {"name": "class_id", "description": "The unique identifier of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_classes_data`", "created_at": 1676404470.5195909}, "source.netsuite_source.netsuite.consolidated_exchange_rates": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "consolidated_exchange_rates", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.consolidated_exchange_rates", "fqn": ["netsuite_source", "netsuite", "netsuite", "consolidated_exchange_rates"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_consolidated_exchange_rates_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The accounting book the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The consolidated exchange rates current rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The consolidated exchange rates historical rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "THe subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_consolidated_exchange_rates_data`", "created_at": 1676404470.5197}, "source.netsuite_source.netsuite.currencies": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "currencies", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.currencies", "fqn": ["netsuite_source", "netsuite", "netsuite", "currencies"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_currencies_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "The names and symbols for all currencies set up in Netsuite.", "columns": {"currency_id": {"name": "currency_id", "description": "The unique identifier of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "The currency's three letter symbol (ie. USD, EUR, CAD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_currencies_data`", "created_at": 1676404470.5198069}, "source.netsuite_source.netsuite.customers": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "customers", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.customers", "fqn": ["netsuite_source", "netsuite", "netsuite", "customers"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_customers_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "The unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_extid": {"name": "customer_extid", "description": "The unique identifier of the external customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The zipcode of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order": {"name": "date_first_order", "description": "The timestamp of the customers first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_customers_data`", "created_at": 1676404470.519918}, "source.netsuite_source.netsuite.departments": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "departments", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.departments", "fqn": ["netsuite_source", "netsuite", "netsuite", "departments"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_departments_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all departments set up in Netsuite.", "columns": {"department_id": {"name": "department_id", "description": "The unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The department's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_departments_data`", "created_at": 1676404470.520027}, "source.netsuite_source.netsuite.expense_accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "expense_accounts", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.expense_accounts", "fqn": ["netsuite_source", "netsuite", "netsuite", "expense_accounts"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_expense_accounts_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all expense accounts.", "columns": {"expense_account_id": {"name": "expense_account_id", "description": "The unique identifier of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The expense account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_expense_accounts_data`", "created_at": 1676404470.520135}, "source.netsuite_source.netsuite.income_accounts": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "income_accounts", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.income_accounts", "fqn": ["netsuite_source", "netsuite", "netsuite", "income_accounts"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_income_accounts_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all income accounts.", "columns": {"income_account_id": {"name": "income_account_id", "description": "The unique identifier of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The income account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_income_accounts_data`", "created_at": 1676404470.520243}, "source.netsuite_source.netsuite.items": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "items", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.items", "fqn": ["netsuite_source", "netsuite", "netsuite", "items"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_items_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing information about the items created in Netsuite.", "columns": {"item_id": {"name": "item_id", "description": "The unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The type of the item (ie. Markup, Service, Discount).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesdescription": {"name": "salesdescription", "description": "The items sales description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_items_data`", "created_at": 1676404470.520349}, "source.netsuite_source.netsuite.locations": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "locations", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.locations", "fqn": ["netsuite_source", "netsuite", "netsuite", "locations"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_locations_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"location_id": {"name": "location_id", "description": "The unique identifier of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The location's name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The location's city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The location's country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_locations_data`", "created_at": 1676404470.520457}, "source.netsuite_source.netsuite.subsidiaries": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "subsidiaries", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.subsidiaries", "fqn": ["netsuite_source", "netsuite", "netsuite", "subsidiaries"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_subsidiaries_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all subsidiaries.", "columns": {"subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id associated with the fiscal calendar the subsidiary is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The parent subsidiary id which the subsidiary is under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_subsidiaries_data`", "created_at": 1676404470.520598}, "source.netsuite_source.netsuite.transaction_lines": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "transaction_lines", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.transaction_lines", "fqn": ["netsuite_source", "netsuite", "netsuite", "transaction_lines"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_transaction_lines_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The subsidiary id of the subsidiary which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the account linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The company id of the company linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The item id of the item which is included in the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "non_posting_line": {"name": "non_posting_line", "description": "Value indicating whether the transaction line is a non posting line (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The class id of the class which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The location id of the location which the transaction line took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The department id of the department linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transaction_lines_data`", "created_at": 1676404470.5207129}, "source.netsuite_source.netsuite.transactions": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "transactions", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.transactions", "fqn": ["netsuite_source", "netsuite", "netsuite", "transactions"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_transactions_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The unique identifier of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction (ie. Paid In Full, Open, Cancelled).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trandate": {"name": "trandate", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The timestamp of the transaction due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The transaction type (ie. Bill, Check, Deposit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany": {"name": "is_intercompany", "description": "Value indicating whether the transaction is intercompany (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_advanced_intercompany": {"name": "is_advanced_intercompany", "description": "Value indicating whether the transaction is an advanced intercompany journal entry (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_transactions_data`", "created_at": 1676404470.5208268}, "source.netsuite_source.netsuite.vendor_types": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "vendor_types", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.vendor_types", "fqn": ["netsuite_source", "netsuite", "netsuite", "vendor_types"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_vendor_types_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all the various types of vendors.", "columns": {"vendor_type_id": {"name": "vendor_type_id", "description": "The unique identifier of the vendor type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the vendor type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendor_types_data`", "created_at": 1676404470.5209339}, "source.netsuite_source.netsuite.vendors": {"database": "dbt-package-testing", "schema": "netsuite_source_integration_tests_1", "name": "vendors", "resource_type": "source", "package_name": "netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "unique_id": "source.netsuite_source.netsuite.vendors", "fqn": ["netsuite_source", "netsuite", "netsuite", "vendors"], "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_vendors_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all vendor information.", "columns": {"vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_type_id": {"name": "vendor_type_id", "description": "The vendor type the vendor is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "The vendor's company name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The timestamp of the date the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`netsuite_source_integration_tests_1`.`netsuite_vendors_data`", "created_at": 1676404470.5210419}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.503395, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.503658, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5039759, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.508043, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.512445, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.512852, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.513236, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.513516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.514675, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.514931, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.515271, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.515409, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.515614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.515775, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5159302, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.516093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5162811, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.516581, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5167449, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.516903, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.517322, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5177119, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.518412, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.518592, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.518888, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.519277, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5194502, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5202508, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.52084, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.521624, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.525044, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.525358, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.526595, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.528755, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.529084, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, sql)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.529569, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.530248, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5348759, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.535406, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5355809, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5357351, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5366778, "supported_languages": null}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.537333, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5376818, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.540203, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.541445, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.542026, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.542835, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.543603, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render_wrapped() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5447738, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.546782, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.547803, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.548246, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.548508, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.548973, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.549205, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.549312, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.549542, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.549709, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.549896, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5499752, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.550077, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.550275, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.550512, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5509188, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.551438, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.551615, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5517828, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.55197, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5521438, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.552276, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5530071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.553191, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.55351, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5537238, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.554385, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.554642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.554892, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.556027, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.556231, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.556383, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5565288, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.556673, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.557056, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.557371, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.557694, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.558135, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.558424, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5621629, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.56234, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.562571, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.563342, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.56352, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.563704, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.565206, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.566659, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5708191, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5711129, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.571292, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.571383, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.571533, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.571651, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.571866, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.572792, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5729961, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.573261, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.573709, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.58002, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.582176, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5826392, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.582962, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.583353, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.583751, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5853992, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.585974, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.586671, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5869179, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.587672, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5941749, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.595925, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.596202, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.59727, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5975611, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.5982442, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.598901, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.599823, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6000772, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.600281, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.60059, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.60078, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.60109, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.601283, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.601554, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.601751, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.601911, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.602195, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6073978, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.613046, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.614319, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6155698, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.616458, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.619134, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.619654, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6198459, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6202931, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.620726, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.623369, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.623677, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6239092, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.625459, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6258261, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.625996, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6261802, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.626452, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.629864, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6352692, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6362371, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6364899, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.636998, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637202, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637344, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637492, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637614, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637779, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.637901, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6384041, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.638599, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.639945, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6403542, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.640594, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6411269, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6413991, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.641696, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6421041, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.642368, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6427252, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6430311, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.643282, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6438699, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6453938, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.646005, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6463091, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.648226, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.649529, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.650333, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.65058, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.650819, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6509, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.651241, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.651413, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.651665, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6517901, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.652051, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6521559, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6525052, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6526709, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.652907, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.652985, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.653259, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6534028, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.653705, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.653857, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.654509, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.654994, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.655339, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.655505, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.655796, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.655936, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6562, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.656368, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.656619, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.656785, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.657038, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.657144, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.657438, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6575758, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.657826, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.657931, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.658865, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.65903, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.659201, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.659355, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6595259, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6597419, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.659908, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6600928, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.660258, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6604118, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.660579, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.660728, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.660894, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.661042, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6613278, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6614661, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.661723, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.661827, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.662175, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6624498, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.662602, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6631382, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.663306, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.663533, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.663813, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.663947, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.664333, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.664651, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.665005, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.665164, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.665579, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.665777, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.665959, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.666154, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.666656, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.666826, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6669781, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.667087, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.667259, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.667348, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.66752, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.667694, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.668166, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.668308, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6684759, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.668898, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.672267, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6725051, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6727328, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.673038, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.67329, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.673627, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.67382, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.674044, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6742332, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.674402, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.674612, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6749141, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.675182, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.675765, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.676009, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6761532, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.676352, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.67679, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6772292, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6789749, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6790972, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.679273, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6793869, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.679936, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.680127, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.680232, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.680468, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6806662, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6809, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.681091, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6813319, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.682038, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6822348, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.682492, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.682732, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.683924, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.684622, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6848, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.685009, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.685185, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6854668, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.685979, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6875021, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.687775, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.687972, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.688205, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.688395, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.688652, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.688865, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6891809, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6893709, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.689543, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.691301, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.691468, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.691799, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.691985, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.692342, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.692582, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6932008, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.693465, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.69428, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6958091, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.696306, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6969972, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.697429, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.697509, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.698047, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.698285, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.698584, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.6988668, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.699224, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.699735, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7002292, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.700939, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7012658, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7016058, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7026858, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.703763, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.704642, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.705775, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.706439, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.706795, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.707546, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7085261, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.708988, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.70947, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.710088, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.710585, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7111528, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7115588, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7120261, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.712512, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.713151, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.713823, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7143738, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.714735, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7151518, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.715533, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7161841, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7171042, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7180202, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.71898, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.719717, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.72065, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.721175, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.72149, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.724938, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.726551, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7268312, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7270029, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.727459, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.727743, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.727951, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7282119, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.728393, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.729033, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.729901, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7306292, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7313159, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.731564, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.731982, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7323189, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.732699, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.733439, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.734331, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.735192, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.735636, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.735838, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.736382, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.73709, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.737988, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.738406, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.738702, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.740015, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.741576, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.742962, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.744641, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.744949, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.745089, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.748412, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.752042, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7523599, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7526221, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.753372, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.753599, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.753812, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.754009, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.754186, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.754362, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7547631, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7550101, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.755399, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7559628, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.756319, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.756669, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.758435, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.758816, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.75963, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.760158, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.761322, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.762895, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.763982, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.76488, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7653959, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.76618, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.767691, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7681768, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.768657, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7688498, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.769252, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7698739, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.770344, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.771033, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7714298, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7715771, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.771721, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.772254, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.773089, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7741828, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.774473, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.776202, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7770822, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.78253, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.783263, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.784201, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.784972, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.785748, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7867572, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7869408, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.787051, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7900229, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7977118, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.797853, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.797931, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.7985191, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.8001652, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.800521, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.800817, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.8011038, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.801434, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.801638, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.801846, "supported_languages": null}, "macro.netsuite_source.get_expense_accounts_columns": {"name": "get_expense_accounts_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_expense_accounts_columns.sql", "original_file_path": "macros/get_expense_accounts_columns.sql", "unique_id": "macro.netsuite_source.get_expense_accounts_columns", "macro_sql": "{% macro get_expense_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"desription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_account_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_including_child_subs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_summary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.8038101, "supported_languages": null}, "macro.netsuite_source.get_locationmainaddress_columns": {"name": "get_locationmainaddress_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_locationmainaddress_columns.sql", "original_file_path": "macros/get_locationmainaddress_columns.sql", "unique_id": "macro.netsuite_source.get_locationmainaddress_columns", "macro_sql": "{% macro get_locationmainaddress_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"addr1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addr2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addr3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addressee\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addrphone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addrtext\", \"datatype\": dbt.type_string()},\n    {\"name\": \"attention\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"dropdownstate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"nkey\", \"datatype\": dbt.type_int()},\n    {\"name\": \"override\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recordowner\", \"datatype\": dbt.type_int()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.806182, "supported_languages": null}, "macro.netsuite_source.get_accounts_columns": {"name": "get_accounts_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounts_columns.sql", "original_file_path": "macros/get_accounts_columns.sql", "unique_id": "macro.netsuite_source.get_accounts_columns", "macro_sql": "{% macro get_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"general_rate_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_balancesheet\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_leftside\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"type_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('accounts_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.807895, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_accounts_columns": {"name": "get_netsuite2_accounts_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounts_columns.sql", "original_file_path": "macros/get_accounts_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_accounts_columns", "macro_sql": "{% macro get_netsuite2_accounts_columns() %}\n\n{% set columns = [\n\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"acctnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accttype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deferralacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cashflowrate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"generalrate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"class\", \"datatype\": dbt.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_int()},\n    {\"name\": \"includechildren\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"issummary\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('accounts_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.809788, "supported_languages": null}, "macro.netsuite_source.get_classes_columns": {"name": "get_classes_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_classes_columns.sql", "original_file_path": "macros/get_classes_columns.sql", "unique_id": "macro.netsuite_source.get_classes_columns", "macro_sql": "{% macro get_classes_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('classes_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.810581, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_classes_columns": {"name": "get_netsuite2_classes_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_classes_columns.sql", "original_file_path": "macros/get_classes_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_classes_columns", "macro_sql": "{% macro get_netsuite2_classes_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('classes_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.811428, "supported_languages": null}, "macro.netsuite_source.get_accountingperiodfiscalcalendars_columns": {"name": "get_accountingperiodfiscalcalendars_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accountingperiodfiscalcalendars_columns.sql", "original_file_path": "macros/get_accountingperiodfiscalcalendars_columns.sql", "unique_id": "macro.netsuite_source.get_accountingperiodfiscalcalendars_columns", "macro_sql": "{% macro get_accountingperiodfiscalcalendars_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accountingperiod\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fiscalcalendar\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.812331, "supported_languages": null}, "macro.netsuite_source.get_accountingbooksubsidiaries_columns": {"name": "get_accountingbooksubsidiaries_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accountingbooksubsidiaries_columns.sql", "original_file_path": "macros/get_accountingbooksubsidiaries_columns.sql", "unique_id": "macro.netsuite_source.get_accountingbooksubsidiaries_columns", "macro_sql": "{% macro get_accountingbooksubsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.8132322, "supported_languages": null}, "macro.netsuite_source.get_items_columns": {"name": "get_items_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_items_columns.sql", "original_file_path": "macros/get_items_columns.sql", "unique_id": "macro.netsuite_source.get_items_columns", "macro_sql": "{% macro get_items_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"allow_drop_ship\", \"datatype\": dbt.type_string()},\n    {\"name\": \"alt_demand_source_item_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"asset_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"atp_lead_time\", \"datatype\": dbt.type_float()},\n    {\"name\": \"atp_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"available_to_partners\", \"datatype\": dbt.type_string()},\n    {\"name\": \"avatax_taxcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"averagecost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"backward_consumption_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"build_sub_assemblies\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"code_of_supply_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"commodity_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"consumption_unit_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cost_0\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cost_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_estimate_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"costing_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_of_manufacture\", \"datatype\": dbt.type_string()},\n    {\"name\": \"create_plan_on_event_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_on_order_count\", \"datatype\": dbt.type_float()},\n    {\"name\": \"custreturn_variance_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_of_last_transaction\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_return_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"deferred_expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"deferred_revenue_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"demand_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"demand_time_fence\", \"datatype\": dbt.type_float()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"deposit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"displayname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"distribution_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"distribution_network\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dropship_expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"effective_bom_control_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"featureddescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"featureditem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fixed_lot_size\", \"datatype\": dbt.type_float()},\n    {\"name\": \"forward_consumption_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"fraud_risk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fx_adjustment_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"gain_loss_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"handling_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"hazmat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat_hazard_class\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat_item_units\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat_item_units_qty\", \"datatype\": dbt.type_float()},\n    {\"name\": \"hazmat_packing_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat_shipping_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"include_child_subsidiaries\", \"datatype\": dbt.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"interco_expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"interco_income_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"invt_count_classification\", \"datatype\": dbt.type_float()},\n    {\"name\": \"invt_count_interval\", \"datatype\": dbt.type_float()},\n    {\"name\": \"is_cont_rev_handling\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_enforce_min_qty_internally\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_hold_rev_rec\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_moss\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_phantom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_special_order_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isonline\", \"datatype\": dbt.type_string()},\n    {\"name\": \"istaxable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_defined_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_image\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_revenue_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_term_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"last_cogs_correction\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_invt_count_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_purchase_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"lot_numbered_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lot_sizing_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturing_charge_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"match_bill_to_receipt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matrix_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maximum_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"minimum_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"mpn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nature_of_transaction_codes_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"next_invt_count_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ng_asset_type_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"ns_lead_time\", \"datatype\": dbt.type_float()},\n    {\"name\": \"offersupport\", \"datatype\": dbt.type_string()},\n    {\"name\": \"onspecial\", \"datatype\": dbt.type_string()},\n    {\"name\": \"overhead_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"periodic_lot_size_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"periodic_lot_size_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pref_purchase_tax_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pref_sale_tax_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pref_stock_level\", \"datatype\": dbt.type_float()},\n    {\"name\": \"prices_include_tax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pricing_group_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"print_sub_items\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prod_price_var_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"prod_qty_var_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"prompt_payment_discount_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_price_var_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchase_unit_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchasedescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"quantityavailable\", \"datatype\": dbt.type_float()},\n    {\"name\": \"quantitybackordered\", \"datatype\": dbt.type_float()},\n    {\"name\": \"quantityonhand\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"reorder_multiple\", \"datatype\": dbt.type_float()},\n    {\"name\": \"reorderpoint\", \"datatype\": dbt.type_float()},\n    {\"name\": \"replenishment_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resalable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reschedule_in_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"reschedule_out_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rev_rec_forecast_rule_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rev_rec_rule_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"revenue_allocation_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"round_up_as_component\", \"datatype\": dbt.type_string()},\n    {\"name\": \"safety_stock_days\", \"datatype\": dbt.type_float()},\n    {\"name\": \"safety_stock_level\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sale_unit_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"salesdescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salesforce_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salesprice\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scrap_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"serialized_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shippingcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"special_work_order_item\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specialsdescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stock_unit_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"storedescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"storedetaileddescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"storedisplayname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supplementary_unit__abberviat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supplementary_unit_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"supply_time_fence\", \"datatype\": dbt.type_float()},\n    {\"name\": \"supply_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_item_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"totalvalue\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transferprice\", \"datatype\": dbt.type_float()},\n    {\"name\": \"type_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type_of_goods_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"udf1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"udf2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"un_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unbuild_variance_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"units_type_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"upc_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"use_component_yield\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"vendorname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendreturn_variance_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"vsoe_deferral\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vsoe_delivered\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vsoe_discount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vsoe_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"weight\", \"datatype\": dbt.type_float()},\n    {\"name\": \"weight_in_user_defined_unit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"weight_unit_index\", \"datatype\": dbt.type_float()},\n    {\"name\": \"wip_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"wip_cost_variance_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"work_order_lead_time\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('items_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.858159, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_items_columns": {"name": "get_netsuite2_items_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_items_columns.sql", "original_file_path": "macros/get_items_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_items_columns", "macro_sql": "{% macro get_netsuite2_items_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"alternatedemandsourceitem\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amortizationperiod\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amortizationtemplate\", \"datatype\": dbt.type_int()},\n    {\"name\": \"assetaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"atpmethod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"autoexpandkitforrevenuemgmt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"averagecost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"backwardconsumptiondays\", \"datatype\": dbt.type_int()},\n    {\"name\": \"billexchratevarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"billingschedule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"billpricevarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"billqtyvarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"buildentireassembly\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buildtime\", \"datatype\": dbt.type_float()},\n    {\"name\": \"class\", \"datatype\": dbt.type_int()},\n    {\"name\": \"consumptionunit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"copydescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"costestimate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"costestimatetype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"costingmethod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"costingmethoddisplay\", \"datatype\": dbt.type_string()},\n    {\"name\": \"countryofmanufacture\", \"datatype\": dbt.type_string()},\n    {\"name\": \"createddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"createexpenseplanson\", \"datatype\": dbt.type_int()},\n    {\"name\": \"createjob\", \"datatype\": dbt.type_string()},\n    {\"name\": \"createrevenueplanson\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deferralaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deferredrevenueaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deferrevrec\", \"datatype\": dbt.type_string()},\n    {\"name\": \"demandmodifier\", \"datatype\": dbt.type_float()},\n    {\"name\": \"demandsource\", \"datatype\": dbt.type_string()},\n    {\"name\": \"demandtimefence\", \"datatype\": dbt.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt.type_int()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"directrevenueposting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"displayname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dropshipexpenseaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"enforceminqtyinternally\", \"datatype\": dbt.type_string()},\n    {\"name\": \"excludefromsitemap\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expenseaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"expenseamortizationrule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fixedlotsize\", \"datatype\": dbt.type_float()},\n    {\"name\": \"forwardconsumptiondays\", \"datatype\": dbt.type_int()},\n    {\"name\": \"froogleproductfeed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fxcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"gainlossaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"generateaccruals\", \"datatype\": dbt.type_string()},\n    {\"name\": \"handlingcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"includechildren\", \"datatype\": dbt.type_string()},\n    {\"name\": \"incomeaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"intercodefrevaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"intercoexpenseaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"intercoincomeaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isdropshipitem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isfulfillable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"islotitem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isonline\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isphantom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isserialitem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isspecialorderitem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isspecialworkorderitem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itemid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itemrevenuecategory\", \"datatype\": dbt.type_int()},\n    {\"name\": \"itemtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"lastpurchaseprice\", \"datatype\": dbt.type_float()},\n    {\"name\": \"leadtime\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_int()},\n    {\"name\": \"manufacturer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matchbilltoreceipt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matrixitemnametemplate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matrixtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maximumquantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"minimumquantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"mpn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nextagcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nextagproductfeed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"overallquantitypricingtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"periodiclotsizedays\", \"datatype\": dbt.type_int()},\n    {\"name\": \"periodiclotsizetype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preferredlocation\", \"datatype\": dbt.type_int()},\n    {\"name\": \"pricinggroup\", \"datatype\": dbt.type_int()},\n    {\"name\": \"printitems\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prodpricevarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"prodqtyvarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"projectexpensetype\", \"datatype\": dbt.type_int()},\n    {\"name\": \"projecttemplate\", \"datatype\": dbt.type_int()},\n    {\"name\": \"purchasedescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchasepricevarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"purchaseunit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"quantitypricingschedule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"relateditemsdescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rescheduleindays\", \"datatype\": dbt.type_int()},\n    {\"name\": \"rescheduleoutdays\", \"datatype\": dbt.type_int()},\n    {\"name\": \"residual\", \"datatype\": dbt.type_float()},\n    {\"name\": \"revenueallocationgroup\", \"datatype\": dbt.type_int()},\n    {\"name\": \"revenuerecognitionrule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"revrecforecastrule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"revreclassfxaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"roundupascomponent\", \"datatype\": dbt.type_string()},\n    {\"name\": \"safetystocklevel\", \"datatype\": dbt.type_float()},\n    {\"name\": \"saleunit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"scrapacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"searchkeywords\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seasonaldemand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipindividually\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shippackage\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shippingcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"shoppingdotcomcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shoppingproductfeed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shopzillacategoryid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shopzillaproductfeed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sitemappriority\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stockdescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stockunit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"storedescription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"storedisplayimage\", \"datatype\": dbt.type_int()},\n    {\"name\": \"storedisplayname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"storedisplaythumbnail\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supplylotsizingmethod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supplyreplenishmentmethod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supplytimefence\", \"datatype\": dbt.type_int()},\n    {\"name\": \"supplytype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"totalquantityonhand\", \"datatype\": dbt.type_float()},\n    {\"name\": \"totalvalue\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transferprice\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unbuildvarianceaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"unitstype\", \"datatype\": dbt.type_int()},\n    {\"name\": \"upccode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"usebins\", \"datatype\": dbt.type_string()},\n    {\"name\": \"usemarginalrates\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendorname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendreturnvarianceaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"vsoedelivered\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vsoepermitdiscount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vsoesopgroup\", \"datatype\": dbt.type_string()},\n    {\"name\": \"weight\", \"datatype\": dbt.type_float()},\n    {\"name\": \"weightunit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"weightunits\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wipacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"wipvarianceacct\", \"datatype\": dbt.type_int()},\n    {\"name\": \"yahooproductfeed\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('items_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.872482, "supported_languages": null}, "macro.netsuite_source.get_transaction_lines_columns": {"name": "get_transaction_lines_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transaction_lines_columns.sql", "original_file_path": "macros/get_transaction_lines_columns.sql", "unique_id": "macro.netsuite_source.get_transaction_lines_columns", "macro_sql": "{% macro get_transaction_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"non_posting_line\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiary_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_line_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transaction_lines_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.874579, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_transaction_lines_columns": {"name": "get_netsuite2_transaction_lines_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transaction_lines_columns.sql", "original_file_path": "macros/get_transaction_lines_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_transaction_lines_columns", "macro_sql": "{% macro get_netsuite2_transaction_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transaction\", \"datatype\": dbt.type_int()},\n    {\"name\": \"linesequencenumber\", \"datatype\": dbt.type_int()},\n    {\"name\": \"memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"item\", \"datatype\": dbt.type_int()},\n    {\"name\": \"class\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isclosed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isbillable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"iscogs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cleared\", \"datatype\": dbt.type_string()},\n    {\"name\": \"commitmentfirm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mainline\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxline\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transaction_lines_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.876516, "supported_languages": null}, "macro.netsuite_source.get_vendors_columns": {"name": "get_vendors_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_vendors_columns.sql", "original_file_path": "macros/get_vendors_columns.sql", "unique_id": "macro.netsuite_source.get_vendors_columns", "macro_sql": "{% macro get_vendors_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_owner\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounts_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"annual_revenue\", \"datatype\": dbt.type_float()},\n    {\"name\": \"auto_renewals\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auto_send_statements\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billaddress\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_class_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"create_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creditlimit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"dic\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_bill_payment_vouchers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_cash_sales\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_credit_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_invoices\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_item_fulfilments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_purchase_orders\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_quotes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_sales_orders\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_statements\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exemption_certificate_no\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"fax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hris_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ico\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id_number_in_the_country_of_r\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id_type_in_the_country_of_r_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"in_transit_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"incoterm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"industry_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"invoice_via_procurement_syste\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoicing_details\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is1099eligible\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_partner\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_person\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isemailhtml\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isemailpdf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"labor_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"last_modified_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_sales_activity\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"line1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"loginaccess\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lsa_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lsa_link_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobile_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"msa_effective_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"no__of_employees\", \"datatype\": dbt.type_float()},\n    {\"name\": \"openbalance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"openbalance_foreign\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payables_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payment_terms_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prepayment_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"printoncheckas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchases_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"represents_subsidiary_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"restrict_access_to_expensify\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salesforce_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipaddress\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_contact_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_contact_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_contact_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_contact_middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxidnum\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_approver_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transactions_need_approval\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uen\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unbilled_orders\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unbilled_orders_foreign\", \"datatype\": dbt.type_float()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vat_registration_no\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"vendor_type_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"zipcode\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('vendors_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.894028, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_vendors_columns": {"name": "get_netsuite2_vendors_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_vendors_columns.sql", "original_file_path": "macros/get_vendors_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_vendors_columns", "macro_sql": "{% macro get_netsuite2_vendors_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altemail\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altphone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"balanceprimary\", \"datatype\": dbt.type_float()},\n    {\"name\": \"billingclass\", \"datatype\": dbt.type_int()},\n    {\"name\": \"category\", \"datatype\": dbt.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contactlist\", \"datatype\": dbt.type_string()},\n    {\"name\": \"creditlimit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"defaultbankaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defaultvendorpaymentaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"emailpreference\", \"datatype\": dbt.type_string()},\n    {\"name\": \"emailtransactions\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entityid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expenseaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"faxtransactions\", \"datatype\": dbt.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"giveaccess\", \"datatype\": dbt.type_string()},\n    {\"name\": \"homephone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"incoterm\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isautogeneratedrepresentingentity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isjobresourcevend\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isperson\", \"datatype\": dbt.type_string()},\n    {\"name\": \"laborcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"lastname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legalname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middlename\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobilephone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payablesaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"printoncheckas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"printtransactions\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"representingsubsidiary\", \"datatype\": dbt.type_int()},\n    {\"name\": \"rolesforsearch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salutation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiaryedition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"terms\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unbilledorders\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unbilledordersprimary\", \"datatype\": dbt.type_float()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"workcalendar\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('vendors_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9002712, "supported_languages": null}, "macro.netsuite_source.get_transactionaccountingline_columns": {"name": "get_transactionaccountingline_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transactionaccountingline_columns.sql", "original_file_path": "macros/get_transactionaccountingline_columns.sql", "unique_id": "macro.netsuite_source.get_transactionaccountingline_columns", "macro_sql": "{% macro get_transactionaccountingline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account\", \"datatype\": dbt.type_int()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amountlinked\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amountpaid\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amountunpaid\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"debit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"netamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"overheadparentitem\", \"datatype\": dbt.type_int()},\n    {\"name\": \"paymentamountunused\", \"datatype\": dbt.type_float()},\n    {\"name\": \"paymentamountused\", \"datatype\": dbt.type_float()},\n    {\"name\": \"posting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transactionline\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.902507, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_transaction_accounting_lines_columns": {"name": "get_netsuite2_transaction_accounting_lines_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transaction_accounting_lines_columns.sql", "original_file_path": "macros/get_transaction_accounting_lines_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_transaction_accounting_lines_columns", "macro_sql": "{% macro get_netsuite2_transaction_accounting_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account\", \"datatype\": dbt.type_int()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amountpaid\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amountunpaid\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"debit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"netamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"paymentamountunused\", \"datatype\": dbt.type_float()},\n    {\"name\": \"paymentamountused\", \"datatype\": dbt.type_float()},\n    {\"name\": \"posting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transactionline\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.904487, "supported_languages": null}, "macro.netsuite_source.get_vendorcategory_columns": {"name": "get_vendorcategory_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_vendorcategory_columns.sql", "original_file_path": "macros/get_vendorcategory_columns.sql", "unique_id": "macro.netsuite_source.get_vendorcategory_columns", "macro_sql": "{% macro get_vendorcategory_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"istaxagency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.905596, "supported_languages": null}, "macro.netsuite_source.get_accounttype_columns": {"name": "get_accounttype_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounttype_columns.sql", "original_file_path": "macros/get_accounttype_columns.sql", "unique_id": "macro.netsuite_source.get_accounttype_columns", "macro_sql": "{% macro get_accounttype_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"balancesheet\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"defaultcashflowratetype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"defaultgeneralratetype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eliminationalgo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"includeinrevaldefault\", \"datatype\": dbt.type_string()},\n    {\"name\": \"internalid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"left\", \"datatype\": dbt.type_string(), \"quote\": True},\n    {\"name\": \"longname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnum\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usercanchangerevaloption\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.907276, "supported_languages": null}, "macro.netsuite_source.get_accounting_books_columns": {"name": "get_accounting_books_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounting_books_columns.sql", "original_file_path": "macros/get_accounting_books_columns.sql", "unique_id": "macro.netsuite_source.get_accounting_books_columns", "macro_sql": "{% macro get_accounting_books_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accounting_book_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_book_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"accounting_book_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"base_book_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"effective_period_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"form_template_component_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"form_template_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"is_adjustment_only\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_arrangement_level_reclass\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_consolidated\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_contingent_revenue_handling\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_include_child_subsidiaries\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_primary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_two_step_revenue_allocation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unbilled_receivable_grouping\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.910128, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_accounting_books_columns": {"name": "get_netsuite2_accounting_books_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounting_books_columns.sql", "original_file_path": "macros/get_accounting_books_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_accounting_books_columns", "macro_sql": "{% macro get_netsuite2_accounting_books_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"basebook\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contingentrevenuehandling\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"effectiveperiod\", \"datatype\": dbt.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isadjustmentonly\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isconsolidated\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isprimary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiariesstring\", \"datatype\": dbt.type_string()},\n    {\"name\": \"twosteprevenueallocation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unbilledreceivablegrouping\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.911733, "supported_languages": null}, "macro.netsuite_source.get_departments_columns": {"name": "get_departments_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_departments_columns.sql", "original_file_path": "macros/get_departments_columns.sql", "unique_id": "macro.netsuite_source.get_departments_columns", "macro_sql": "{% macro get_departments_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('departments_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.912652, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_departments_columns": {"name": "get_netsuite2_departments_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_departments_columns.sql", "original_file_path": "macros/get_departments_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_departments_columns", "macro_sql": "{% macro get_netsuite2_departments_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('departments_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.91359, "supported_languages": null}, "macro.netsuite_source.get_transactions_columns": {"name": "get_transactions_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transactions_columns.sql", "original_file_path": "macros/get_transactions_columns.sql", "unique_id": "macro.netsuite_source.get_transactions_columns", "macro_sql": "{% macro get_transactions_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"due_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"is_advanced_intercompany\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_intercompany\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trandate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transaction_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transactions_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.915356, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_transactions_columns": {"name": "get_netsuite2_transactions_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_transactions_columns.sql", "original_file_path": "macros/get_transactions_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_transactions_columns", "macro_sql": "{% macro get_netsuite2_transactions_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"transactionnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trandate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"createddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"duedate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"closedate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"postingperiod\", \"datatype\": dbt.type_int()},\n    {\"name\": \"posting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"intercoadj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isreversal\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transactions_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9171178, "supported_languages": null}, "macro.netsuite_source.get_entity_columns": {"name": "get_entity_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_entity_columns.sql", "original_file_path": "macros/get_entity_columns.sql", "unique_id": "macro.netsuite_source.get_entity_columns", "macro_sql": "{% macro get_entity_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"altemail\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altphone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt.type_int()},\n    {\"name\": \"customer\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entityid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt.type_string()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"genericresource\", \"datatype\": dbt.type_int()},\n    {\"name\": \"homephone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isperson\", \"datatype\": dbt.type_string()},\n    {\"name\": \"laborcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"lastname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middlename\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobilephone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"othername\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"partner\", \"datatype\": dbt.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"project\", \"datatype\": dbt.type_int()},\n    {\"name\": \"projecttemplate\", \"datatype\": dbt.type_int()},\n    {\"name\": \"salutation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"toplevelparent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.921704, "supported_languages": null}, "macro.netsuite_source.get_accounting_periods_columns": {"name": "get_accounting_periods_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounting_periods_columns.sql", "original_file_path": "macros/get_accounting_periods_columns.sql", "unique_id": "macro.netsuite_source.get_accounting_periods_columns", "macro_sql": "{% macro get_accounting_periods_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"closed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_accounts_payable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_accounts_receivable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_all\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"closed_payroll\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ending\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fiscal_calendar_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"fivetran_index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_adjustment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locked_accounts_payable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locked_accounts_receivable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locked_all\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locked_payroll\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"quarter\", \"datatype\": dbt.type_string()},\n    {\"name\": \"starting\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"year_0\", \"datatype\": dbt.type_string()},\n    {\"name\": \"year_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9254432, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_accounting_periods_columns": {"name": "get_netsuite2_accounting_periods_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_accounting_periods_columns.sql", "original_file_path": "macros/get_accounting_periods_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_accounting_periods_columns", "macro_sql": "{% macro get_netsuite2_accounting_periods_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"alllocked\", \"datatype\": dbt.type_string()},\n    {\"name\": \"allownonglchanges\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aplocked\", \"datatype\": dbt.type_string()},\n    {\"name\": \"arlocked\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closedondate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"enddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isadjust\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isposting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isquarter\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isyear\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"periodname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"startdate\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.927379, "supported_languages": null}, "macro.netsuite_source.get_consolidated_exchange_rates_columns": {"name": "get_consolidated_exchange_rates_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_consolidated_exchange_rates_columns.sql", "original_file_path": "macros/get_consolidated_exchange_rates_columns.sql", "unique_id": "macro.netsuite_source.get_consolidated_exchange_rates_columns", "macro_sql": "{% macro get_consolidated_exchange_rates_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accounting_book_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"average_budget_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"average_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"consolidated_exchange_rate_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"current_budget_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"current_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"from_subsidiary_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"historical_budget_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"historical_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"to_subsidiary_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('consolidated_exchange_rates_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9294279, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns": {"name": "get_netsuite2_consolidated_exchange_rates_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_consolidated_exchange_rates_columns.sql", "original_file_path": "macros/get_consolidated_exchange_rates_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns", "macro_sql": "{% macro get_netsuite2_consolidated_exchange_rates_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"averagerate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currentrate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"fromcurrency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fromsubsidiary\", \"datatype\": dbt.type_int()},\n    {\"name\": \"historicalrate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"postingperiod\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tocurrency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tosubsidiary\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('consolidated_exchange_rates_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.930646, "supported_languages": null}, "macro.netsuite_source.get_income_accounts_columns": {"name": "get_income_accounts_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_income_accounts_columns.sql", "original_file_path": "macros/get_income_accounts_columns.sql", "unique_id": "macro.netsuite_source.get_income_accounts_columns", "macro_sql": "{% macro get_income_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"desription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"income_account_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"is_including_child_subs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_summary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.932705, "supported_languages": null}, "macro.netsuite_source.get_customers_columns": {"name": "get_customers_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_customers_columns.sql", "original_file_path": "macros/get_customers_columns.sql", "unique_id": "macro.netsuite_source.get_customers_columns", "macro_sql": "{% macro get_customers_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_first_order\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zipcode\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('customers_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9343622, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_customers_columns": {"name": "get_netsuite2_customers_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_customers_columns.sql", "original_file_path": "macros/get_customers_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_customers_columns", "macro_sql": "{% macro get_netsuite2_customers_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entityid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"isperson\", \"datatype\": dbt.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"receivablesaccount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"firstorderdate\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('customers_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9359932, "supported_languages": null}, "macro.netsuite_source.get_locations_columns": {"name": "get_locations_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_locations_columns.sql", "original_file_path": "macros/get_locations_columns.sql", "unique_id": "macro.netsuite_source.get_locations_columns", "macro_sql": "{% macro get_locations_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('locations_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.93721, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_locations_columns": {"name": "get_netsuite2_locations_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_locations_columns.sql", "original_file_path": "macros/get_locations_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_locations_columns", "macro_sql": "{% macro get_netsuite2_locations_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mainaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('locations_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.938155, "supported_languages": null}, "macro.netsuite_source.get_entityaddress_columns": {"name": "get_entityaddress_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_entityaddress_columns.sql", "original_file_path": "macros/get_entityaddress_columns.sql", "unique_id": "macro.netsuite_source.get_entityaddress_columns", "macro_sql": "{% macro get_entityaddress_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"addr1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addr2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addr3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addressee\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addrphone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"addrtext\", \"datatype\": dbt.type_string()},\n    {\"name\": \"attention\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"dropdownstate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"nkey\", \"datatype\": dbt.type_int()},\n    {\"name\": \"override\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recordowner\", \"datatype\": dbt.type_int()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.940341, "supported_languages": null}, "macro.netsuite_source.get_vendor_types_columns": {"name": "get_vendor_types_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_vendor_types_columns.sql", "original_file_path": "macros/get_vendor_types_columns.sql", "unique_id": "macro.netsuite_source.get_vendor_types_columns", "macro_sql": "{% macro get_vendor_types_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"vendor_type_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_type_id\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.941354, "supported_languages": null}, "macro.netsuite_source.get_subsidiaries_columns": {"name": "get_subsidiaries_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_subsidiaries_columns.sql", "original_file_path": "macros/get_subsidiaries_columns.sql", "unique_id": "macro.netsuite_source.get_subsidiaries_columns", "macro_sql": "{% macro get_subsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"base_currency_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"branch_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"edition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"federal_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiscal_calendar_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_elimination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_moss\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive_bool\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"moss_nexus_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt.type_float()},\n    {\"name\": \"return_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_address1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_address2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"return_zipcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_zipcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state_tax_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subnav__searchable_subsidiary\", \"datatype\": dbt.type_float()},\n    {\"name\": \"subsidiary_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subsidiary_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"taxonomy_reference_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tran_num_prefix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uen\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zipcode\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('subsidiaries_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9484422, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_subsidiaries_columns": {"name": "get_netsuite2_subsidiaries_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_subsidiaries_columns.sql", "original_file_path": "macros/get_subsidiaries_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_subsidiaries_columns", "macro_sql": "{% macro get_netsuite2_subsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mainaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiscalcalendar\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('subsidiaries_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.94969, "supported_languages": null}, "macro.netsuite_source.get_job_columns": {"name": "get_job_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_job_columns.sql", "original_file_path": "macros/get_job_columns.sql", "unique_id": "macro.netsuite_source.get_job_columns", "macro_sql": "{% macro get_job_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"actualtime\", \"datatype\": dbt.type_float()},\n    {\"name\": \"allowallresourcesfortasks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"allowexpenses\", \"datatype\": dbt.type_string()},\n    {\"name\": \"allowtime\", \"datatype\": dbt.type_string()},\n    {\"name\": \"alternatecontact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billingschedule\", \"datatype\": dbt.type_int()},\n    {\"name\": \"calculatedenddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"calculatedenddatebaseline\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contactlist\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"currencyprecision\", \"datatype\": dbt.type_int()},\n    {\"name\": \"custentity1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custentity4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custentity5\", \"datatype\": dbt.type_int()},\n    {\"name\": \"customer\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt.type_int()},\n    {\"name\": \"enddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"entityid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entitystatus\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt.type_string()},\n    {\"name\": \"estimatedcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedgrossprofit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedgrossprofitpercent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedlaborcost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedlaborcostbaseline\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedlaborrevenue\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedrevenue\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedtime\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedtimeoverride\", \"datatype\": dbt.type_float()},\n    {\"name\": \"estimatedtimeoverridebaseline\", \"datatype\": dbt.type_float()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"files\", \"datatype\": dbt.type_string()},\n    {\"name\": \"forecastchargerunondemand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fxrate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"includecrmtasksintotals\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isexempttime\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isproductivetime\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isutilizedtime\", \"datatype\": dbt.type_string()},\n    {\"name\": \"jobbillingtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"jobitem\", \"datatype\": dbt.type_int()},\n    {\"name\": \"jobprice\", \"datatype\": dbt.type_float()},\n    {\"name\": \"jobtype\", \"datatype\": dbt.type_int()},\n    {\"name\": \"lastbaselinedate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"limittimetoassignees\", \"datatype\": dbt.type_string()},\n    {\"name\": \"materializetime\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt.type_int()},\n    {\"name\": \"percentcomplete\", \"datatype\": dbt.type_float()},\n    {\"name\": \"percenttimecomplete\", \"datatype\": dbt.type_float()},\n    {\"name\": \"primarycontact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"projectedenddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"projectedenddatebaseline\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"projectmanager\", \"datatype\": dbt.type_int()},\n    {\"name\": \"startdate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"startdatebaseline\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"timeapproval\", \"datatype\": dbt.type_int()},\n    {\"name\": \"timeremaining\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.958991, "supported_languages": null}, "macro.netsuite_source.get_currencies_columns": {"name": "get_currencies_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_currencies_columns.sql", "original_file_path": "macros/get_currencies_columns.sql", "unique_id": "macro.netsuite_source.get_currencies_columns", "macro_sql": "{% macro get_currencies_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_extid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"is_inactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"precision_0\", \"datatype\": dbt.type_float()},\n    {\"name\": \"symbol\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.96064, "supported_languages": null}, "macro.netsuite_source.get_netsuite2_currencies_columns": {"name": "get_netsuite2_currencies_columns", "resource_type": "macro", "package_name": "netsuite_source", "path": "macros/get_currencies_columns.sql", "original_file_path": "macros/get_currencies_columns.sql", "unique_id": "macro.netsuite_source.get_netsuite2_currencies_columns", "macro_sql": "{% macro get_netsuite2_currencies_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currencyprecision\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"displaysymbol\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"externalid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fxrateupdatetimezone\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"includeinfxrateupdates\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isbasecurrency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"overridecurrencyformat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"symbol\", \"datatype\": dbt.type_string()},\n    {\"name\": \"symbolplacement\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.962285, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.962709, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.963666, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.963837, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.964004, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.964169, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.964319, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.964494, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.965355, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9660459, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9671948, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9674509, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.967703, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9679492, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.968199, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9684732, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.968747, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9690812, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.96919, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9693608, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.969464, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.969846, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.970449, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.971267, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.971762, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.971902, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.972037, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9721658, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9723039, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9752991, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.975465, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9756281, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.975787, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.977609, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.978476, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9786189, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.978902, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.979198, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.979331, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9794571, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.979584, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.980082, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.980691, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.981199, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9814122, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.981646, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.981911, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.983062, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.987252, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9876301, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9880168, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.989671, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.990258, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.99084, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9910011, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9911602, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.991337, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9914932, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.991651, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.992388, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9934049, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.994133, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.994302, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.994467, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9946299, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.994795, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.99498, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9952378, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.995341, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9954402, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.9961689, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404468.99765, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.000245, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.001745, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.0020218, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.002128, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.00223, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.002638, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676404469.003041, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.netsuite_source.account_periods_table": {"name": "account_periods_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.account_periods_table", "block_contents": "Table detailing all accounting periods, including monthly, quarterly and yearly."}, "doc.netsuite_source.accounting_books_table": {"name": "accounting_books_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounting_books_table", "block_contents": "Table detailing all accounting books set up in Netsuite."}, "doc.netsuite_source.accounts_table": {"name": "accounts_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounts_table", "block_contents": "Table detailing all accounts set up in Netsuite."}, "doc.netsuite_source.classes_table": {"name": "classes_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.classes_table", "block_contents": "Table detailing all classes set up in Netsuite."}, "doc.netsuite_source.consolidated_exchange_rates_table": {"name": "consolidated_exchange_rates_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.consolidated_exchange_rates_table", "block_contents": "Table detailing average, historical and current exchange rates for all accounting periods."}, "doc.netsuite_source.customers_table": {"name": "customers_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.customers_table", "block_contents": "Table detailing all customer information."}, "doc.netsuite_source.currencies_table": {"name": "currencies_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.currencies_table", "block_contents": "Table detailing all currency information."}, "doc.netsuite_source.departments_table": {"name": "departments_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.departments_table", "block_contents": "Table detailing all departments set up in Netsuite."}, "doc.netsuite_source.expense_accounts_table": {"name": "expense_accounts_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.expense_accounts_table", "block_contents": "Table detailing all expense accounts."}, "doc.netsuite_source.income_accounts_table": {"name": "income_accounts_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.income_accounts_table", "block_contents": "Table detailing all income accounts."}, "doc.netsuite_source.items_table": {"name": "items_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.items_table", "block_contents": "Table detailing information about the items created in Netsuite."}, "doc.netsuite_source.locations_table": {"name": "locations_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.locations_table", "block_contents": "Table detailing all locations, including store, warehouse and office locations."}, "doc.netsuite_source.subsidiaries_table": {"name": "subsidiaries_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.subsidiaries_table", "block_contents": "Table detailing all subsidiaries."}, "doc.netsuite_source.transaction_lines_table": {"name": "transaction_lines_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.transaction_lines_table", "block_contents": "A table detailing all transaction lines for all transactions."}, "doc.netsuite_source.transaction_table": {"name": "transaction_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.transaction_table", "block_contents": "A table detailing all transactions."}, "doc.netsuite_source.vendor_types_table": {"name": "vendor_types_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.vendor_types_table", "block_contents": "A table detailing all the various types of vendors."}, "doc.netsuite_source.vendor_table": {"name": "vendor_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.vendor_table", "block_contents": "A table detailing all vendor information."}, "doc.netsuite_source.entities_table": {"name": "entities_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.entities_table", "block_contents": "Table detailing all entities in Netsuite."}, "doc.netsuite_source.jobs_table": {"name": "jobs_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.jobs_table", "block_contents": "Table detailing all jobs."}, "doc.netsuite_source.transaction_accounting_lines_table": {"name": "transaction_accounting_lines_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.transaction_accounting_lines_table", "block_contents": "A table detailing all transaction lines for all transactions."}, "doc.netsuite_source.vendor_categories_table": {"name": "vendor_categories_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.vendor_categories_table", "block_contents": "A table containing categories and how they map to vendors."}, "doc.netsuite_source.accounting_book_subsidiaries_table": {"name": "accounting_book_subsidiaries_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounting_book_subsidiaries_table", "block_contents": "A table containing the various account books and the respective subsidiaries."}, "doc.netsuite_source.accounting_period_fiscal_calendars_table": {"name": "accounting_period_fiscal_calendars_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounting_period_fiscal_calendars_table", "block_contents": "A table containing the accounting fiscal calendar periods."}, "doc.netsuite_source.account_types_table": {"name": "account_types_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.account_types_table", "block_contents": "A table containing the various account types within Netsuite."}, "doc.netsuite_source.entity_address_table": {"name": "entity_address_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.entity_address_table", "block_contents": "A table containing addresses and the various entities which they map."}, "doc.netsuite_source.location_main_address_table": {"name": "location_main_address_table", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.location_main_address_table", "block_contents": "A table containing the location main addresses."}, "doc.netsuite_source._fivetran_id": {"name": "_fivetran_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source._fivetran_id", "block_contents": "Unique ID used by Fivetran to sync and dedupe data."}, "doc.netsuite_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source._fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "doc.netsuite_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source._fivetran_deleted", "block_contents": "Timestamp of when a record was deleted."}, "doc.netsuite_source.vendor_id": {"name": "vendor_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.vendor_id", "block_contents": "The unique identifier of the vendor."}, "doc.netsuite_source.company_name": {"name": "company_name", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.company_name", "block_contents": "Name of the company."}, "doc.netsuite_source.create_date_at": {"name": "create_date_at", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.create_date_at", "block_contents": "Timestamp of the record creation."}, "doc.netsuite_source.vendor_category_id": {"name": "vendor_category_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.vendor_category_id", "block_contents": "Unique identifier of the vendor category."}, "doc.netsuite_source.accounting_period_id": {"name": "accounting_period_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounting_period_id", "block_contents": "The accounting period id of the accounting period which the transaction took place in."}, "doc.netsuite_source.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.created_at", "block_contents": "Timestamp of when the record was created."}, "doc.netsuite_source.currency_id": {"name": "currency_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.currency_id", "block_contents": "The currency id of the currency used within the record."}, "doc.netsuite_source.entity_id": {"name": "entity_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.entity_id", "block_contents": "The entity id of the entity used for the record."}, "doc.netsuite_source.transaction_id": {"name": "transaction_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.transaction_id", "block_contents": "The transaction id of referenced for the record."}, "doc.netsuite_source.department_id": {"name": "department_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.department_id", "block_contents": "The unique identifier of the department used for the record."}, "doc.netsuite_source.subsidiary_id": {"name": "subsidiary_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.subsidiary_id", "block_contents": "The unique identifier of the subsidiary used for the record."}, "doc.netsuite_source.location_id": {"name": "location_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.location_id", "block_contents": "The unique identifier of the location used for the record."}, "doc.netsuite_source.class_id": {"name": "class_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.class_id", "block_contents": "The unique identifier of the class used for the record."}, "doc.netsuite_source.item_id": {"name": "item_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.item_id", "block_contents": "The unique identifier of the item used within the record."}, "doc.netsuite_source.fiscal_calendar_id": {"name": "fiscal_calendar_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.fiscal_calendar_id", "block_contents": "Reference to the fiscal calendar used for the record."}, "doc.netsuite_source.main_address_id": {"name": "main_address_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.main_address_id", "block_contents": "Reference to the main address used for the record."}, "doc.netsuite_source.addr1": {"name": "addr1", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.addr1", "block_contents": "The associated address 1."}, "doc.netsuite_source.addr2": {"name": "addr2", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.addr2", "block_contents": "The associated address 2."}, "doc.netsuite_source.addr3": {"name": "addr3", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.addr3", "block_contents": "The associated address 3."}, "doc.netsuite_source.addressee": {"name": "addressee", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.addressee", "block_contents": "The individual associated with the address"}, "doc.netsuite_source.full_address": {"name": "full_address", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.full_address", "block_contents": "The full address associated."}, "doc.netsuite_source.city": {"name": "city", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.city", "block_contents": "The associated city."}, "doc.netsuite_source.country": {"name": "country", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.country", "block_contents": "The associated country."}, "doc.netsuite_source.state": {"name": "state", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.state", "block_contents": "The associated state."}, "doc.netsuite_source.nkey": {"name": "nkey", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.nkey", "block_contents": "The associated Netsuite key."}, "doc.netsuite_source.zipcode": {"name": "zipcode", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.zipcode", "block_contents": "The associated zipcode."}, "doc.netsuite_source.customer_id": {"name": "customer_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.customer_id", "block_contents": "Unique identifier of the customer."}, "doc.netsuite_source.accounting_book_id": {"name": "accounting_book_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.accounting_book_id", "block_contents": "Unique identifier of the accounting book."}, "doc.netsuite_source.account_type_id": {"name": "account_type_id", "resource_type": "doc", "package_name": "netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.netsuite_source.account_type_id", "block_contents": "Unique identifier of thea account type."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": [], "seed.netsuite_source_integration_tests.netsuite_vendors_data": [], "seed.netsuite_source_integration_tests.netsuite2_classification_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": [], "seed.netsuite_source_integration_tests.netsuite2_entities_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_data": [], "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": [], "seed.netsuite_source_integration_tests.netsuite_customers_data": [], "seed.netsuite_source_integration_tests.netsuite_locations_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_data": [], "seed.netsuite_source_integration_tests.netsuite_items_data": [], "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_type_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": [], "seed.netsuite_source_integration_tests.netsuite_classes_data": [], "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": [], "seed.netsuite_source_integration_tests.netsuite_departments_data": [], "seed.netsuite_source_integration_tests.netsuite2_customer_data": [], "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_department_data": [], "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite_currencies_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": [], "seed.netsuite_source_integration_tests.netsuite_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": [], "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": [], "seed.netsuite_source_integration_tests.netsuite2_job_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_data": [], "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": [], "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": [], "seed.netsuite_source_integration_tests.netsuite2_item_data": [], "seed.netsuite_source_integration_tests.netsuite_transactions_data": [], "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": [], "model.netsuite_source.stg_netsuite2__transactions": ["model.netsuite_source.stg_netsuite2__transactions_tmp", "model.netsuite_source.stg_netsuite2__transactions_tmp"], "model.netsuite_source.stg_netsuite2__jobs": ["model.netsuite_source.stg_netsuite2__jobs_tmp", "model.netsuite_source.stg_netsuite2__jobs_tmp"], "model.netsuite_source.stg_netsuite2__vendors": ["model.netsuite_source.stg_netsuite2__vendors_tmp", "model.netsuite_source.stg_netsuite2__vendors_tmp"], "model.netsuite_source.stg_netsuite2__classes": ["model.netsuite_source.stg_netsuite2__classes_tmp", "model.netsuite_source.stg_netsuite2__classes_tmp"], "model.netsuite_source.stg_netsuite2__account_types": ["model.netsuite_source.stg_netsuite2__account_types_tmp", "model.netsuite_source.stg_netsuite2__account_types_tmp"], "model.netsuite_source.stg_netsuite2__entities": ["model.netsuite_source.stg_netsuite2__entities_tmp", "model.netsuite_source.stg_netsuite2__entities_tmp"], "model.netsuite_source.stg_netsuite2__accounting_periods": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "model.netsuite_source.stg_netsuite2__accounting_periods_tmp"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"], "model.netsuite_source.stg_netsuite2__customers": ["model.netsuite_source.stg_netsuite2__customers_tmp", "model.netsuite_source.stg_netsuite2__customers_tmp"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"], "model.netsuite_source.stg_netsuite2__accounts": ["model.netsuite_source.stg_netsuite2__accounts_tmp", "model.netsuite_source.stg_netsuite2__accounts_tmp"], "model.netsuite_source.stg_netsuite2__transaction_lines": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_lines_tmp"], "model.netsuite_source.stg_netsuite2__subsidiaries": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__subsidiaries_tmp"], "model.netsuite_source.stg_netsuite2__entity_address": ["model.netsuite_source.stg_netsuite2__entity_address_tmp", "model.netsuite_source.stg_netsuite2__entity_address_tmp"], "model.netsuite_source.stg_netsuite2__location_main_address": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp", "model.netsuite_source.stg_netsuite2__location_main_address_tmp"], "model.netsuite_source.stg_netsuite2__vendor_categories": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "model.netsuite_source.stg_netsuite2__vendor_categories_tmp"], "model.netsuite_source.stg_netsuite2__departments": ["model.netsuite_source.stg_netsuite2__departments_tmp", "model.netsuite_source.stg_netsuite2__departments_tmp"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"], "model.netsuite_source.stg_netsuite2__accounting_books": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp", "model.netsuite_source.stg_netsuite2__accounting_books_tmp"], "model.netsuite_source.stg_netsuite2__items": ["model.netsuite_source.stg_netsuite2__items_tmp", "model.netsuite_source.stg_netsuite2__items_tmp"], "model.netsuite_source.stg_netsuite2__currencies": ["model.netsuite_source.stg_netsuite2__currencies_tmp", "model.netsuite_source.stg_netsuite2__currencies_tmp"], "model.netsuite_source.stg_netsuite2__locations": ["model.netsuite_source.stg_netsuite2__locations_tmp", "model.netsuite_source.stg_netsuite2__locations_tmp"], "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": ["source.netsuite_source.netsuite2.subsidiary"], "model.netsuite_source.stg_netsuite2__transactions_tmp": ["source.netsuite_source.netsuite2.transaction"], "model.netsuite_source.stg_netsuite2__entity_address_tmp": ["source.netsuite_source.netsuite2.entity_address"], "model.netsuite_source.stg_netsuite2__account_types_tmp": ["source.netsuite_source.netsuite2.account_type"], "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": ["source.netsuite_source.netsuite2.accounting_period"], "model.netsuite_source.stg_netsuite2__jobs_tmp": ["source.netsuite_source.netsuite2.job"], "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": ["source.netsuite_source.netsuite2.transaction_line"], "model.netsuite_source.stg_netsuite2__accounts_tmp": ["source.netsuite_source.netsuite2.account"], "model.netsuite_source.stg_netsuite2__customers_tmp": ["source.netsuite_source.netsuite2.customer"], "model.netsuite_source.stg_netsuite2__entities_tmp": ["source.netsuite_source.netsuite2.entity"], "model.netsuite_source.stg_netsuite2__currencies_tmp": ["source.netsuite_source.netsuite2.currency"], "model.netsuite_source.stg_netsuite2__vendors_tmp": ["source.netsuite_source.netsuite2.vendor"], "model.netsuite_source.stg_netsuite2__items_tmp": ["source.netsuite_source.netsuite2.item"], "model.netsuite_source.stg_netsuite2__accounting_books_tmp": ["source.netsuite_source.netsuite2.accounting_book"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": ["source.netsuite_source.netsuite2.accounting_period_fiscal_calendars"], "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": ["source.netsuite_source.netsuite2.vendor_category"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": ["source.netsuite_source.netsuite2.accounting_book_subsidiaries"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": ["source.netsuite_source.netsuite2.transaction_accounting_line"], "model.netsuite_source.stg_netsuite2__location_main_address_tmp": ["source.netsuite_source.netsuite2.location_main_address"], "model.netsuite_source.stg_netsuite2__locations_tmp": ["source.netsuite_source.netsuite2.location"], "model.netsuite_source.stg_netsuite2__departments_tmp": ["source.netsuite_source.netsuite2.department"], "model.netsuite_source.stg_netsuite2__classes_tmp": ["source.netsuite_source.netsuite2.classification"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": ["source.netsuite_source.netsuite2.consolidated_exchange_rate"], "model.netsuite_source.stg_netsuite__transactions": ["model.netsuite_source.stg_netsuite__transactions_tmp", "model.netsuite_source.stg_netsuite__transactions_tmp"], "model.netsuite_source.stg_netsuite__customers": ["model.netsuite_source.stg_netsuite__customers_tmp", "model.netsuite_source.stg_netsuite__customers_tmp"], "model.netsuite_source.stg_netsuite__accounting_books": ["model.netsuite_source.stg_netsuite__accounting_books_tmp", "model.netsuite_source.stg_netsuite__accounting_books_tmp"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"], "model.netsuite_source.stg_netsuite__transaction_lines": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp", "model.netsuite_source.stg_netsuite__transaction_lines_tmp"], "model.netsuite_source.stg_netsuite__income_accounts": ["model.netsuite_source.stg_netsuite__income_accounts_tmp", "model.netsuite_source.stg_netsuite__income_accounts_tmp"], "model.netsuite_source.stg_netsuite__expense_accounts": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp", "model.netsuite_source.stg_netsuite__expense_accounts_tmp"], "model.netsuite_source.stg_netsuite__vendors": ["model.netsuite_source.stg_netsuite__vendors_tmp", "model.netsuite_source.stg_netsuite__vendors_tmp"], "model.netsuite_source.stg_netsuite__classes": ["model.netsuite_source.stg_netsuite__classes_tmp", "model.netsuite_source.stg_netsuite__classes_tmp"], "model.netsuite_source.stg_netsuite__subsidiaries": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp", "model.netsuite_source.stg_netsuite__subsidiaries_tmp"], "model.netsuite_source.stg_netsuite__accounts": ["model.netsuite_source.stg_netsuite__accounts_tmp", "model.netsuite_source.stg_netsuite__accounts_tmp"], "model.netsuite_source.stg_netsuite__items": ["model.netsuite_source.stg_netsuite__items_tmp", "model.netsuite_source.stg_netsuite__items_tmp"], "model.netsuite_source.stg_netsuite__locations": ["model.netsuite_source.stg_netsuite__locations_tmp", "model.netsuite_source.stg_netsuite__locations_tmp"], "model.netsuite_source.stg_netsuite__departments": ["model.netsuite_source.stg_netsuite__departments_tmp", "model.netsuite_source.stg_netsuite__departments_tmp"], "model.netsuite_source.stg_netsuite__currencies": ["model.netsuite_source.stg_netsuite__currencies_tmp", "model.netsuite_source.stg_netsuite__currencies_tmp"], "model.netsuite_source.stg_netsuite__vendor_types": ["model.netsuite_source.stg_netsuite__vendor_types_tmp", "model.netsuite_source.stg_netsuite__vendor_types_tmp"], "model.netsuite_source.stg_netsuite__accounting_periods": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp", "model.netsuite_source.stg_netsuite__accounting_periods_tmp"], "model.netsuite_source.stg_netsuite__accounting_periods_tmp": ["source.netsuite_source.netsuite.accounting_periods"], "model.netsuite_source.stg_netsuite__accounting_books_tmp": ["source.netsuite_source.netsuite.accounting_books"], "model.netsuite_source.stg_netsuite__customers_tmp": ["source.netsuite_source.netsuite.customers"], "model.netsuite_source.stg_netsuite__transaction_lines_tmp": ["source.netsuite_source.netsuite.transaction_lines"], "model.netsuite_source.stg_netsuite__income_accounts_tmp": ["source.netsuite_source.netsuite.income_accounts"], "model.netsuite_source.stg_netsuite__accounts_tmp": ["source.netsuite_source.netsuite.accounts"], "model.netsuite_source.stg_netsuite__departments_tmp": ["source.netsuite_source.netsuite.departments"], "model.netsuite_source.stg_netsuite__currencies_tmp": ["source.netsuite_source.netsuite.currencies"], "model.netsuite_source.stg_netsuite__vendor_types_tmp": ["source.netsuite_source.netsuite.vendor_types"], "model.netsuite_source.stg_netsuite__vendors_tmp": ["source.netsuite_source.netsuite.vendors"], "model.netsuite_source.stg_netsuite__locations_tmp": ["source.netsuite_source.netsuite.locations"], "model.netsuite_source.stg_netsuite__items_tmp": ["source.netsuite_source.netsuite.items"], "model.netsuite_source.stg_netsuite__subsidiaries_tmp": ["source.netsuite_source.netsuite.subsidiaries"], "model.netsuite_source.stg_netsuite__transactions_tmp": ["source.netsuite_source.netsuite.transactions"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": ["source.netsuite_source.netsuite.consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__classes_tmp": ["source.netsuite_source.netsuite.classes"], "model.netsuite_source.stg_netsuite__expense_accounts_tmp": ["source.netsuite_source.netsuite.expense_accounts"], "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": ["model.netsuite_source.stg_netsuite__accounting_books"], "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": ["model.netsuite_source.stg_netsuite__accounting_books"], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": ["model.netsuite_source.stg_netsuite__accounts"], "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": ["model.netsuite_source.stg_netsuite__accounts"], "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": ["model.netsuite_source.stg_netsuite__classes"], "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": ["model.netsuite_source.stg_netsuite__classes"], "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": ["model.netsuite_source.stg_netsuite__currencies"], "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": ["model.netsuite_source.stg_netsuite__currencies"], "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": ["model.netsuite_source.stg_netsuite__customers"], "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": ["model.netsuite_source.stg_netsuite__customers"], "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": ["model.netsuite_source.stg_netsuite__departments"], "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": ["model.netsuite_source.stg_netsuite__departments"], "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": ["model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": ["model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": ["model.netsuite_source.stg_netsuite__income_accounts"], "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": ["model.netsuite_source.stg_netsuite__income_accounts"], "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": ["model.netsuite_source.stg_netsuite__items"], "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": ["model.netsuite_source.stg_netsuite__items"], "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": ["model.netsuite_source.stg_netsuite__locations"], "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": ["model.netsuite_source.stg_netsuite__locations"], "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": ["model.netsuite_source.stg_netsuite__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": ["model.netsuite_source.stg_netsuite__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": ["model.netsuite_source.stg_netsuite__transactions"], "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": ["model.netsuite_source.stg_netsuite__transactions"], "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": ["model.netsuite_source.stg_netsuite__vendor_types"], "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": ["model.netsuite_source.stg_netsuite__vendor_types"], "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": ["model.netsuite_source.stg_netsuite__vendors"], "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": ["model.netsuite_source.stg_netsuite__vendors"], "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": ["model.netsuite_source.stg_netsuite2__account_types"], "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": ["model.netsuite_source.stg_netsuite2__account_types"], "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": ["model.netsuite_source.stg_netsuite2__accounting_books"], "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": ["model.netsuite_source.stg_netsuite2__accounting_books"], "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": ["model.netsuite_source.stg_netsuite2__accounting_periods"], "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": ["model.netsuite_source.stg_netsuite2__accounting_periods"], "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": ["model.netsuite_source.stg_netsuite2__accounts"], "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": ["model.netsuite_source.stg_netsuite2__accounts"], "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": ["model.netsuite_source.stg_netsuite2__classes"], "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": ["model.netsuite_source.stg_netsuite2__classes"], "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": ["model.netsuite_source.stg_netsuite2__currencies"], "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": ["model.netsuite_source.stg_netsuite2__currencies"], "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": ["model.netsuite_source.stg_netsuite2__customers"], "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": ["model.netsuite_source.stg_netsuite2__customers"], "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": ["model.netsuite_source.stg_netsuite2__departments"], "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": ["model.netsuite_source.stg_netsuite2__departments"], "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": ["model.netsuite_source.stg_netsuite2__entities"], "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": ["model.netsuite_source.stg_netsuite2__entities"], "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": ["model.netsuite_source.stg_netsuite2__items"], "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": ["model.netsuite_source.stg_netsuite2__items"], "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": ["model.netsuite_source.stg_netsuite2__jobs"], "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": ["model.netsuite_source.stg_netsuite2__jobs"], "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": ["model.netsuite_source.stg_netsuite2__locations"], "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": ["model.netsuite_source.stg_netsuite2__locations"], "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": ["model.netsuite_source.stg_netsuite2__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": ["model.netsuite_source.stg_netsuite2__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": ["model.netsuite_source.stg_netsuite2__transactions"], "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": ["model.netsuite_source.stg_netsuite2__transactions"], "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": ["model.netsuite_source.stg_netsuite2__vendor_categories"], "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": ["model.netsuite_source.stg_netsuite2__vendor_categories"], "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": ["model.netsuite_source.stg_netsuite2__vendors"], "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": ["model.netsuite_source.stg_netsuite2__vendors"], "source.netsuite_source.netsuite2.account_type": [], "source.netsuite_source.netsuite2.accounting_book_subsidiaries": [], "source.netsuite_source.netsuite2.accounting_book": [], "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": [], "source.netsuite_source.netsuite2.accounting_period": [], "source.netsuite_source.netsuite2.account": [], "source.netsuite_source.netsuite2.classification": [], "source.netsuite_source.netsuite2.consolidated_exchange_rate": [], "source.netsuite_source.netsuite2.currency": [], "source.netsuite_source.netsuite2.customer": [], "source.netsuite_source.netsuite2.department": [], "source.netsuite_source.netsuite2.entity": [], "source.netsuite_source.netsuite2.entity_address": [], "source.netsuite_source.netsuite2.item": [], "source.netsuite_source.netsuite2.job": [], "source.netsuite_source.netsuite2.location_main_address": [], "source.netsuite_source.netsuite2.location": [], "source.netsuite_source.netsuite2.subsidiary": [], "source.netsuite_source.netsuite2.transaction_accounting_line": [], "source.netsuite_source.netsuite2.transaction_line": [], "source.netsuite_source.netsuite2.transaction": [], "source.netsuite_source.netsuite2.vendor_category": [], "source.netsuite_source.netsuite2.vendor": [], "source.netsuite_source.netsuite.accounting_books": [], "source.netsuite_source.netsuite.accounting_periods": [], "source.netsuite_source.netsuite.accounts": [], "source.netsuite_source.netsuite.classes": [], "source.netsuite_source.netsuite.consolidated_exchange_rates": [], "source.netsuite_source.netsuite.currencies": [], "source.netsuite_source.netsuite.customers": [], "source.netsuite_source.netsuite.departments": [], "source.netsuite_source.netsuite.expense_accounts": [], "source.netsuite_source.netsuite.income_accounts": [], "source.netsuite_source.netsuite.items": [], "source.netsuite_source.netsuite.locations": [], "source.netsuite_source.netsuite.subsidiaries": [], "source.netsuite_source.netsuite.transaction_lines": [], "source.netsuite_source.netsuite.transactions": [], "source.netsuite_source.netsuite.vendor_types": [], "source.netsuite_source.netsuite.vendors": []}, "child_map": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": [], "seed.netsuite_source_integration_tests.netsuite_vendors_data": [], "seed.netsuite_source_integration_tests.netsuite2_classification_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": [], "seed.netsuite_source_integration_tests.netsuite2_entities_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_data": [], "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": [], "seed.netsuite_source_integration_tests.netsuite_customers_data": [], "seed.netsuite_source_integration_tests.netsuite_locations_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_data": [], "seed.netsuite_source_integration_tests.netsuite_items_data": [], "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_type_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": [], "seed.netsuite_source_integration_tests.netsuite_classes_data": [], "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": [], "seed.netsuite_source_integration_tests.netsuite_departments_data": [], "seed.netsuite_source_integration_tests.netsuite2_customer_data": [], "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_department_data": [], "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite_currencies_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": [], "seed.netsuite_source_integration_tests.netsuite_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": [], "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": [], "seed.netsuite_source_integration_tests.netsuite2_job_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_data": [], "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": [], "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": [], "seed.netsuite_source_integration_tests.netsuite2_item_data": [], "seed.netsuite_source_integration_tests.netsuite_transactions_data": [], "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": [], "model.netsuite_source.stg_netsuite2__transactions": ["test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4"], "model.netsuite_source.stg_netsuite2__jobs": ["test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c"], "model.netsuite_source.stg_netsuite2__vendors": ["test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d"], "model.netsuite_source.stg_netsuite2__classes": ["test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98"], "model.netsuite_source.stg_netsuite2__account_types": ["test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f"], "model.netsuite_source.stg_netsuite2__entities": ["test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50"], "model.netsuite_source.stg_netsuite2__accounting_periods": ["test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": ["test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348"], "model.netsuite_source.stg_netsuite2__customers": ["test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": ["test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396"], "model.netsuite_source.stg_netsuite2__accounts": ["test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17"], "model.netsuite_source.stg_netsuite2__transaction_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1"], "model.netsuite_source.stg_netsuite2__subsidiaries": ["test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229"], "model.netsuite_source.stg_netsuite2__entity_address": [], "model.netsuite_source.stg_netsuite2__location_main_address": [], "model.netsuite_source.stg_netsuite2__vendor_categories": ["test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6"], "model.netsuite_source.stg_netsuite2__departments": ["test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd", "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": ["test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a"], "model.netsuite_source.stg_netsuite2__accounting_books": ["test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230"], "model.netsuite_source.stg_netsuite2__items": ["test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee"], "model.netsuite_source.stg_netsuite2__currencies": ["test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78"], "model.netsuite_source.stg_netsuite2__locations": ["test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149"], "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": ["model.netsuite_source.stg_netsuite2__subsidiaries", "model.netsuite_source.stg_netsuite2__subsidiaries"], "model.netsuite_source.stg_netsuite2__transactions_tmp": ["model.netsuite_source.stg_netsuite2__transactions", "model.netsuite_source.stg_netsuite2__transactions"], "model.netsuite_source.stg_netsuite2__entity_address_tmp": ["model.netsuite_source.stg_netsuite2__entity_address", "model.netsuite_source.stg_netsuite2__entity_address"], "model.netsuite_source.stg_netsuite2__account_types_tmp": ["model.netsuite_source.stg_netsuite2__account_types", "model.netsuite_source.stg_netsuite2__account_types"], "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": ["model.netsuite_source.stg_netsuite2__accounting_periods", "model.netsuite_source.stg_netsuite2__accounting_periods"], "model.netsuite_source.stg_netsuite2__jobs_tmp": ["model.netsuite_source.stg_netsuite2__jobs", "model.netsuite_source.stg_netsuite2__jobs"], "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": ["model.netsuite_source.stg_netsuite2__transaction_lines", "model.netsuite_source.stg_netsuite2__transaction_lines"], "model.netsuite_source.stg_netsuite2__accounts_tmp": ["model.netsuite_source.stg_netsuite2__accounts", "model.netsuite_source.stg_netsuite2__accounts"], "model.netsuite_source.stg_netsuite2__customers_tmp": ["model.netsuite_source.stg_netsuite2__customers", "model.netsuite_source.stg_netsuite2__customers"], "model.netsuite_source.stg_netsuite2__entities_tmp": ["model.netsuite_source.stg_netsuite2__entities", "model.netsuite_source.stg_netsuite2__entities"], "model.netsuite_source.stg_netsuite2__currencies_tmp": ["model.netsuite_source.stg_netsuite2__currencies", "model.netsuite_source.stg_netsuite2__currencies"], "model.netsuite_source.stg_netsuite2__vendors_tmp": ["model.netsuite_source.stg_netsuite2__vendors", "model.netsuite_source.stg_netsuite2__vendors"], "model.netsuite_source.stg_netsuite2__items_tmp": ["model.netsuite_source.stg_netsuite2__items", "model.netsuite_source.stg_netsuite2__items"], "model.netsuite_source.stg_netsuite2__accounting_books_tmp": ["model.netsuite_source.stg_netsuite2__accounting_books", "model.netsuite_source.stg_netsuite2__accounting_books"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": ["model.netsuite_source.stg_netsuite2__vendor_categories", "model.netsuite_source.stg_netsuite2__vendor_categories"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "model.netsuite_source.stg_netsuite2__location_main_address_tmp": ["model.netsuite_source.stg_netsuite2__location_main_address", "model.netsuite_source.stg_netsuite2__location_main_address"], "model.netsuite_source.stg_netsuite2__locations_tmp": ["model.netsuite_source.stg_netsuite2__locations", "model.netsuite_source.stg_netsuite2__locations"], "model.netsuite_source.stg_netsuite2__departments_tmp": ["model.netsuite_source.stg_netsuite2__departments", "model.netsuite_source.stg_netsuite2__departments"], "model.netsuite_source.stg_netsuite2__classes_tmp": ["model.netsuite_source.stg_netsuite2__classes", "model.netsuite_source.stg_netsuite2__classes"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__transactions": ["test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79"], "model.netsuite_source.stg_netsuite__customers": ["test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9"], "model.netsuite_source.stg_netsuite__accounting_books": ["test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": ["test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54"], "model.netsuite_source.stg_netsuite__transaction_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c"], "model.netsuite_source.stg_netsuite__income_accounts": ["test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07"], "model.netsuite_source.stg_netsuite__expense_accounts": ["test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff"], "model.netsuite_source.stg_netsuite__vendors": ["test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39"], "model.netsuite_source.stg_netsuite__classes": ["test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b"], "model.netsuite_source.stg_netsuite__subsidiaries": ["test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0"], "model.netsuite_source.stg_netsuite__accounts": ["test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281"], "model.netsuite_source.stg_netsuite__items": ["test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654"], "model.netsuite_source.stg_netsuite__locations": ["test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2"], "model.netsuite_source.stg_netsuite__departments": ["test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1"], "model.netsuite_source.stg_netsuite__currencies": ["test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c"], "model.netsuite_source.stg_netsuite__vendor_types": ["test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69"], "model.netsuite_source.stg_netsuite__accounting_periods": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563"], "model.netsuite_source.stg_netsuite__accounting_periods_tmp": ["model.netsuite_source.stg_netsuite__accounting_periods", "model.netsuite_source.stg_netsuite__accounting_periods"], "model.netsuite_source.stg_netsuite__accounting_books_tmp": ["model.netsuite_source.stg_netsuite__accounting_books", "model.netsuite_source.stg_netsuite__accounting_books"], "model.netsuite_source.stg_netsuite__customers_tmp": ["model.netsuite_source.stg_netsuite__customers", "model.netsuite_source.stg_netsuite__customers"], "model.netsuite_source.stg_netsuite__transaction_lines_tmp": ["model.netsuite_source.stg_netsuite__transaction_lines", "model.netsuite_source.stg_netsuite__transaction_lines"], "model.netsuite_source.stg_netsuite__income_accounts_tmp": ["model.netsuite_source.stg_netsuite__income_accounts", "model.netsuite_source.stg_netsuite__income_accounts"], "model.netsuite_source.stg_netsuite__accounts_tmp": ["model.netsuite_source.stg_netsuite__accounts", "model.netsuite_source.stg_netsuite__accounts"], "model.netsuite_source.stg_netsuite__departments_tmp": ["model.netsuite_source.stg_netsuite__departments", "model.netsuite_source.stg_netsuite__departments"], "model.netsuite_source.stg_netsuite__currencies_tmp": ["model.netsuite_source.stg_netsuite__currencies", "model.netsuite_source.stg_netsuite__currencies"], "model.netsuite_source.stg_netsuite__vendor_types_tmp": ["model.netsuite_source.stg_netsuite__vendor_types", "model.netsuite_source.stg_netsuite__vendor_types"], "model.netsuite_source.stg_netsuite__vendors_tmp": ["model.netsuite_source.stg_netsuite__vendors", "model.netsuite_source.stg_netsuite__vendors"], "model.netsuite_source.stg_netsuite__locations_tmp": ["model.netsuite_source.stg_netsuite__locations", "model.netsuite_source.stg_netsuite__locations"], "model.netsuite_source.stg_netsuite__items_tmp": ["model.netsuite_source.stg_netsuite__items", "model.netsuite_source.stg_netsuite__items"], "model.netsuite_source.stg_netsuite__subsidiaries_tmp": ["model.netsuite_source.stg_netsuite__subsidiaries", "model.netsuite_source.stg_netsuite__subsidiaries"], "model.netsuite_source.stg_netsuite__transactions_tmp": ["model.netsuite_source.stg_netsuite__transactions", "model.netsuite_source.stg_netsuite__transactions"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__classes_tmp": ["model.netsuite_source.stg_netsuite__classes", "model.netsuite_source.stg_netsuite__classes"], "model.netsuite_source.stg_netsuite__expense_accounts_tmp": ["model.netsuite_source.stg_netsuite__expense_accounts", "model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": [], "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": [], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": [], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": [], "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": [], "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": [], "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": [], "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": [], "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": [], "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": [], "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": [], "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": [], "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": [], "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": [], "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": [], "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": [], "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": [], "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": [], "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": [], "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": [], "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": [], "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": [], "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": [], "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": [], "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": [], "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": [], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": [], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": [], "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": [], "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": [], "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": [], "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": [], "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": [], "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": [], "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": [], "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": [], "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": [], "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": [], "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": [], "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": [], "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": [], "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": [], "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": [], "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": [], "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": [], "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": [], "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": [], "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": [], "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": [], "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": [], "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": [], "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": [], "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": [], "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": [], "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": [], "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": [], "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": [], "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": [], "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": [], "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": [], "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": [], "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": [], "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": [], "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": [], "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": [], "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": [], "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": [], "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": [], "source.netsuite_source.netsuite2.account_type": ["model.netsuite_source.stg_netsuite2__account_types_tmp"], "source.netsuite_source.netsuite2.accounting_book_subsidiaries": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"], "source.netsuite_source.netsuite2.accounting_book": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp"], "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"], "source.netsuite_source.netsuite2.accounting_period": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp"], "source.netsuite_source.netsuite2.account": ["model.netsuite_source.stg_netsuite2__accounts_tmp"], "source.netsuite_source.netsuite2.classification": ["model.netsuite_source.stg_netsuite2__classes_tmp"], "source.netsuite_source.netsuite2.consolidated_exchange_rate": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"], "source.netsuite_source.netsuite2.currency": ["model.netsuite_source.stg_netsuite2__currencies_tmp"], "source.netsuite_source.netsuite2.customer": ["model.netsuite_source.stg_netsuite2__customers_tmp"], "source.netsuite_source.netsuite2.department": ["model.netsuite_source.stg_netsuite2__departments_tmp"], "source.netsuite_source.netsuite2.entity": ["model.netsuite_source.stg_netsuite2__entities_tmp"], "source.netsuite_source.netsuite2.entity_address": ["model.netsuite_source.stg_netsuite2__entity_address_tmp"], "source.netsuite_source.netsuite2.item": ["model.netsuite_source.stg_netsuite2__items_tmp"], "source.netsuite_source.netsuite2.job": ["model.netsuite_source.stg_netsuite2__jobs_tmp"], "source.netsuite_source.netsuite2.location_main_address": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp"], "source.netsuite_source.netsuite2.location": ["model.netsuite_source.stg_netsuite2__locations_tmp"], "source.netsuite_source.netsuite2.subsidiary": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp"], "source.netsuite_source.netsuite2.transaction_accounting_line": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"], "source.netsuite_source.netsuite2.transaction_line": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp"], "source.netsuite_source.netsuite2.transaction": ["model.netsuite_source.stg_netsuite2__transactions_tmp"], "source.netsuite_source.netsuite2.vendor_category": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp"], "source.netsuite_source.netsuite2.vendor": ["model.netsuite_source.stg_netsuite2__vendors_tmp"], "source.netsuite_source.netsuite.accounting_books": ["model.netsuite_source.stg_netsuite__accounting_books_tmp"], "source.netsuite_source.netsuite.accounting_periods": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp"], "source.netsuite_source.netsuite.accounts": ["model.netsuite_source.stg_netsuite__accounts_tmp"], "source.netsuite_source.netsuite.classes": ["model.netsuite_source.stg_netsuite__classes_tmp"], "source.netsuite_source.netsuite.consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"], "source.netsuite_source.netsuite.currencies": ["model.netsuite_source.stg_netsuite__currencies_tmp"], "source.netsuite_source.netsuite.customers": ["model.netsuite_source.stg_netsuite__customers_tmp"], "source.netsuite_source.netsuite.departments": ["model.netsuite_source.stg_netsuite__departments_tmp"], "source.netsuite_source.netsuite.expense_accounts": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp"], "source.netsuite_source.netsuite.income_accounts": ["model.netsuite_source.stg_netsuite__income_accounts_tmp"], "source.netsuite_source.netsuite.items": ["model.netsuite_source.stg_netsuite__items_tmp"], "source.netsuite_source.netsuite.locations": ["model.netsuite_source.stg_netsuite__locations_tmp"], "source.netsuite_source.netsuite.subsidiaries": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp"], "source.netsuite_source.netsuite.transaction_lines": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp"], "source.netsuite_source.netsuite.transactions": ["model.netsuite_source.stg_netsuite__transactions_tmp"], "source.netsuite_source.netsuite.vendor_types": ["model.netsuite_source.stg_netsuite__vendor_types_tmp"], "source.netsuite_source.netsuite.vendors": ["model.netsuite_source.stg_netsuite__vendors_tmp"]}}